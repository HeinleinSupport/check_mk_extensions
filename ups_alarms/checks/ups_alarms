#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# Description of OIDs used from RFC 1628
#   upsAlarm              OBJECT IDENTIFIER ::= { upsObjects 6 }
#
#   upsAlarmsPresent OBJECT-TYPE
#       SYNTAX     Gauge32
#       MAX-ACCESS read-only
#       STATUS     current
#       DESCRIPTION
#               "The present number of active alarm conditions."
#       ::= { upsAlarm 1 }
#
#   upsAlarmTable OBJECT-TYPE
#       SYNTAX     SEQUENCE OF UpsAlarmEntry
#       MAX-ACCESS not-accessible
#       STATUS     current
#       DESCRIPTION
#               "A list of alarm table entries.  The table contains
#               zero, one, or many rows at any moment, depending upon
#               the number of alarm conditions in effect.  The table
#               is initially empty at agent startup.  The agent
#               creates a row in the table each time a condition is
#               detected and deletes that row when that condition no
#               longer pertains.  The agent creates the first row with
#               upsAlarmId equal to 1, and increments the value of
#               upsAlarmId each time a new row is created, wrapping to
#               the first free value greater than or equal to 1 when
#               the maximum value of upsAlarmId would otherwise be
#               exceeded.  Consequently, after multiple operations,
#               the table may become sparse, e.g., containing entries
#               for rows 95, 100, 101, and 203 and the entries should
#               not be assumed to be in chronological order because
#               upsAlarmId might have wrapped.
#
#               Alarms are named by an AutonomousType (OBJECT
#               IDENTIFIER), upsAlarmDescr, to allow a single table to
#               reflect well known alarms plus alarms defined by a
#               particular implementation, i.e., as documented in the
#               private enterprise MIB definition for the device.  No
#               two rows will have the same value of upsAlarmDescr,
#               since alarms define conditions.  In order to meet this
#               requirement, care should be taken in the definition of
#               alarm conditions to insure that a system cannot enter
#               the same condition multiple times simultaneously.
#
#               The number of rows in the table at any given time is
#               reflected by the value of upsAlarmsPresent."
#       ::= { upsAlarm 2 }

def inventory_ups_alarms(info):
    import cmk.utils.debug
    if cmk.utils.debug.enabled():
        print "info = ",
        pprint.pprint(info)
    if info[0][0]:
        return [(None, {})]

def check_ups_alarms(_no_item, _no_params, info):
    transUpsAlarm = { '.1.3.6.1.2.1.33.1.6.3.1': 'upsAlarmBatteryBad',
                      '.1.3.6.1.2.1.33.1.6.3.2': 'upsAlarmOnBattery',
                      '.1.3.6.1.2.1.33.1.6.3.3': 'upsAlarmLowBattery',
                      '.1.3.6.1.2.1.33.1.6.3.4': 'upsAlarmDepletedBattery',
                      '.1.3.6.1.2.1.33.1.6.3.5': 'upsAlarmTempBad',
                      '.1.3.6.1.2.1.33.1.6.3.6': 'upsAlarmInputBad',
                      '.1.3.6.1.2.1.33.1.6.3.7': 'upsAlarmOutputBad',
                      '.1.3.6.1.2.1.33.1.6.3.8': 'upsAlarmOutputOverload',
                      '.1.3.6.1.2.1.33.1.6.3.9': 'upsAlarmOnBypass',
                      '.1.3.6.1.2.1.33.1.6.3.10': 'upsAlarmBypassBad',
                      '.1.3.6.1.2.1.33.1.6.3.11': 'upsAlarmOutputOffAsRequested',
                      '.1.3.6.1.2.1.33.1.6.3.12': 'upsAlarmUpsOffAsRequested',
                      '.1.3.6.1.2.1.33.1.6.3.13': 'upsAlarmChargerFailed',
                      '.1.3.6.1.2.1.33.1.6.3.14': 'upsAlarmUpsOutputOff',
                      '.1.3.6.1.2.1.33.1.6.3.15': 'upsAlarmUpsSystemOff',
                      '.1.3.6.1.2.1.33.1.6.3.16': 'upsAlarmFanFailure',
                      '.1.3.6.1.2.1.33.1.6.3.17': 'upsAlarmFuseFailure',
                      '.1.3.6.1.2.1.33.1.6.3.18': 'upsAlarmGeneralFault',
                      '.1.3.6.1.2.1.33.1.6.3.19': 'upsAlarmDiagnosticTestFailed',
                      '.1.3.6.1.2.1.33.1.6.3.20': 'upsAlarmCommunicationsLost',
                      '.1.3.6.1.2.1.33.1.6.3.21': 'upsAlarmAwaitingPower',
                      '.1.3.6.1.2.1.33.1.6.3.22': 'upsAlarmShutdownPending',
                      '.1.3.6.1.2.1.33.1.6.3.23': 'upsAlarmShutdownImminent',
                      '.1.3.6.1.2.1.33.1.6.3.24': 'upsAlarmTestInProgress',
    }
    numAlarms = saveint(info[0][0])
    if numAlarms > 0:
        uptime = parse_snmp_uptime(info[1][0][0])
        alarms = []
        for alarm in info[0][1]:
            alarmtime = parse_snmp_uptime(alarm[1])
            alarms.append("%s (was %s ago)" % (transUpsAlarm.get(alarm[0], alarm[0]),
                                               get_age_human_readable(uptime - alarmtime)))
        return 2, "%d Alarms present (see long output)\n%s" % (numAlarms, "\n".join(alarms))
    else:
        return 0, "No Alarms present"

check_info['ups_alarms'] = {
    "inventory_function": inventory_ups_alarms,
    "check_function": check_ups_alarms,
    "service_description": "UPS Alarms",
    "snmp_info": [
        (".1.3.6.1.2.1.33.1.6", ["1.0"]),
        (".1.3.6.1.2.1.33.1.6.2.1", ["2", "3"]),
        ],
    "snmp_scan_function": lambda oid: ups_generic_scan_function(oid) or oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.318.1.3.27",
    "includes": ["uptime.include", "ups_generic.include"],
    "extra_sections": ["snmp_uptime"],
}
