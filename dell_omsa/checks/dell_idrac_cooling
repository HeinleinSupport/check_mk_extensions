#!/usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-

def inventory_dell_idrac_cooling(info):
    inventory = []
    for line in info:
        inventory.append(( line[0], None ))
    return inventory

def check_dell_idrac_cooling(item, params, info):
    cooling_state = {
        1 : 'Other',
        2 : 'Unknown',
        3 : 'OK',
        4 : 'NonCritical',
        5 : 'Critical',
        6 : 'NonRecoverable',
        }
    cooling_setting = {
        0  : 'Disabled',
        1  : 'Unknown',
        2  : 'Enabled',
        4  : 'not Ready',
        6  : 'Enabled and not Ready',
        }
    cooling_redundancy = {
        1  : 'Other',
        2  : 'Unknown',
        3  : 'Full',
        4  : 'Degraded',
        5  : 'Lost',
        6  : 'not Redundant',
        7  : 'Offline',
        }
    for line in info:
        if line[0] != item:
            continue
        setting = saveint(line[1])
        redundancy = saveint(line[2])
        state = saveint(line[4])
        try:
            info_text = "%s (%s): State %s, Redundancy %s" % (line[3],
                                                              cooling_setting[setting],
                                                              cooling_state[state],
                                                              cooling_redundancy[redundancy],
                                                              )
        except KeyError:
            info_text = "%s %d %d %d" % (line[3], setting, state, redundancy)
        if state in [3] and setting in [2] and redundancy in [3]:
            return (0, info_text)
        if state in [1, 4] or setting in [0] or redundancy in [1, 4, 6]:
            return (1, info_text)
        if state in [5, 6] or setting in [4, 6] or redundancy in [5, 7]:
            return (2, info_text)
        return (3, info_text)
    return (3, "Coolingdevice %s not found" % item, [])

check_info["dell_idrac_cooling"] = {
    'check_function'        : check_dell_idrac_cooling,
    'inventory_function'    : inventory_dell_idrac_cooling,
    'service_description'   : 'iDRAC Cooling %s',
    'has_perfdata'          : False,
    'snmp_info'             : ('.1.3.6.1.4.1.674.10892.5.4.700.10.1', ['2',  # coolingUnitIndex
                                                                       '4',  # coolingUnitStateSettings
                                                                       '5',  # coolingUnitRedundancyStatus
                                                                       '7',  # coolingUnitName
                                                                       '8',  # coolingUnitStatus
                                                                       ] ),
    'snmp_scan_function'    : lambda oid: oid(".1.3.6.1.4.1.674.10892.5.4.700.10.1.1.1.1"),
}

