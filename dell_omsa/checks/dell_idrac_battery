#!/usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-

def inventory_dell_idrac_battery(info):
    inventory = []
    for line in info:
        inventory.append(( line[0], None ))
    return inventory

def check_dell_idrac_battery(item, params, info):
    bat_setting = {
        0  : 'Disabled',
        1  : 'Unknown',
        2  : 'Enabled',
        4  : 'not Ready',
        6  : 'Enabled and not Ready',
        }
    bat_state = {
        1  : 'Other',
        2  : 'Unknown',
        3  : 'OK',
        4  : 'non Critical',
        5  : 'Critical',
        6  : 'non Recoverable',
        }
    for line in info:
        if line[0] != item:
            continue
        setting = saveint(line[2])
        state = saveint(line[3])
        try:
            info_text = "%s %s, State %s" % (line[1],
                                             bat_setting[setting],
                                             bat_state[state],
                                             )
        except KeyError:
            info_text = "%s %d %d %d" % (line[1], setting, state)
        if state in [3] and setting in [2]:
            return (0, info_text)
        if state in [1, 4] or setting in [0]:
            return (1, info_text)
        if state in [5, 6] or setting in [4, 6]:
            return (2, info_text)
        return (3, info_text)
    return (3, "Battery %s not found" % item)

check_info["dell_idrac_battery"] = {
    'check_function'        : check_dell_idrac_battery,
    'inventory_function'    : inventory_dell_idrac_battery,
    'service_description'   : 'iDRAC Battery %s',
    'has_perfdata'          : False,
    'snmp_info'             : ('.1.3.6.1.4.1.674.10892.5.4.600.50.1', ['2',  # systemBatteryIndex
                                                                       '7',  # systemBatteryLocationName
                                                                       '4',  # systemBatteryStateSettings
                                                                       '5',  # systemBatteryStatus
                                                                       ] ),
    'snmp_scan_function'    : lambda oid: oid(".1.3.6.1.4.1.674.10892.5.4.600.50.1.2.1.1"),
}

