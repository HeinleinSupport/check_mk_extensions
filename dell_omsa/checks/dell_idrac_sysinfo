#!/usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-

def inventory_dell_idrac_sysinfo(info):
    return [ ( None, None ) ]

def check_dell_idrac_sysinfo(_no_item, params, info):
    state = {
        1  : 'Other',
        2  : 'Unknown',
        3  : 'OK',
        4  : 'non Critical',
        5  : 'Critical',
        6  : 'non Recoverable',
        }
    chassisState = saveint(info[0][5])
    biosState = saveint(info[0][6])
    info_text = "%s, ServiceTag %s, BIOS: %s, %s %s" % (info[0][0],
                                                        info[0][1],
                                                        info[0][2],
                                                        info[0][3],
                                                        info[0][4],
                                                        )
    if chassisState == 3 and biosState == 3:
        return (0, info_text)
    if chassisState in [1, 4] or biosState in [1, 4]:
        return (1, info_text + ", Chassis %s, BIOS %s" % (state[chassisState], state[biosState]))
    if chassisState in [5, 6] or biosState in [5, 6]:
        return (2, info_text + ", Chassis %s, BIOS %s" % (state[chassisState], state[biosState]))
    return (3, info_text  + ", Chassis %d, BIOS %d" % (chassisState, biosState))

check_info["dell_idrac_sysinfo"] = {
    'check_function'        : check_dell_idrac_sysinfo,
    'inventory_function'    : inventory_dell_idrac_sysinfo,
    'service_description'   : 'iDRAC SysInfo',
    'has_perfdata'          : False,
    'snmp_info'             : ('.1.3.6.1.4.1.674.10892.5.4.300', [
        '10.1.9.1',      # chassisModeTypelName
        '10.1.11.1',     # chassisServiceTagName
        '50.1.8.1.1',    # systemBIOSVersionName
        '60.1.8.1.1',    # firmwareTypeName
        '60.1.11.1.1',   # firmwareVersionName
        '10.1.4.1',      # chassisStatus
        '50.1.5.1.1',    # systemBIOSStatus
        ] ),
    'snmp_scan_function'    : lambda oid: oid(".1.3.6.1.4.1.674.10892.5.4.300.10.1.9.1"),
}
