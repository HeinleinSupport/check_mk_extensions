#!/usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-

#
# (c) 2021 Heinlein Support GmbH
#          Robert Sander <r.sander@heinlein-support.de>
#

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  This file is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

import shlex
quote_shell_string = shlex.quote
from cmk.base.check_api import host_name
import cmk.base.config as config
from cmk.checkengine.fetcher import SourceType
from functools import reduce

def _creds_to_args(creds):
    args = ''
    if isinstance(creds, str):
        args += ' -v 2c'
        args += ' -c %s' % quote_shell_string(creds)
    elif isinstance(creds, tuple):
        args += ' -v 3 -l %s' % creds[0]
        if creds[0] == 'noAuthNoPriv':
            args += ' -u %s' % quote_shell_string(creds[1])
        if creds[0] == 'authNoPriv':
            args += ' -a "%s"' % creds[1]
            args += ' -u %s' % quote_shell_string(creds[2])
            args += ' -A %s' % quote_shell_string(creds[3])
        if creds[0] == 'authPriv':
            args += ' -a "%s"' % creds[1]
            args += ' -u %s' % quote_shell_string(creds[2])
            args += ' -A %s' % quote_shell_string(creds[3])
            args += ' -x "%s"' % creds[4]
            args += ' -X %s' % quote_shell_string(creds[5])
    return args

def check_snmp_metric_arguments(params):

    args = ''
        
    if 'creds' in params:
        args += _creds_to_args(params['creds'])
    else:
        config_cache = config.get_config_cache()
        ipaddress = config.lookup_ip_address(config_cache, host_name())
        snmp_config = config_cache.make_snmp_config(host_name(), ipaddress, SourceType.HOST)
        args += _creds_to_args(snmp_config.credentials)

    if "timeout" in params:
        args += ' -t %d' % params["timeout"]

    if "factor" in params:
        args += ' --factor %f' % params["factor"]

    if "unit" in params:
        args += ' --unit %s' % quote_shell_string(params["unit"])

    if "metric" in params:
        args += ' --metric %s' % quote_shell_string(params["metric"])

    if "levels_upper" in params:
        args += ' --warn %f' % params["levels_upper"][0]
        args += ' --crit %f' % params["levels_upper"][1]

    if "levels_lower" in params:
        args += ' --lwarn %f' % params["levels_lower"][0]
        args += ' --lcrit %f' % params["levels_lower"][1]

    if 'hostname' in params:
        args += " %s" % quote_shell_string(params['hostname'])
    else:
        args += " $HOSTADDRESS$"

    if "port" in params:
        args += ":%d" % params["port"]

    args += " %s" % quote_shell_string(params['oid'])
        
    return args

def check_snmp_metric_description(params):
    return params['description']

active_check_info['snmp_metric'] = {
    "command_line"        : "check_snmp_metric $ARG1$",
    "argument_function"   : check_snmp_metric_arguments,
    "service_description" : check_snmp_metric_description,
    "has_perfdata"        : True,
}


