#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# <<<filehandles>>>
# global 14464    0       765289
# 1 34 root /sbin/init
# 38 21 root /lib/systemd/systemd-journald
# 82 8 root /usr/sbin/rsyslogd -n
# 84 11 root /usr/bin/dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation
# 91 13 root /lib/systemd/systemd-logind
# pid filehandles user cmdline

inventory_filehandles_rules = []

factory_settings["filehandles_default_levels"] = {
    "levels" : (80, 90),
}

def _filehandles_matches_inventory(process_line, process_pattern, userspec):
    user, command_line = process_line[2], process_line[3:]

    if user != None:
        if userspec:
            if userspec.startswith('~'):
                if not re.match(userspec[1:], user):
                    return False, None
            elif userspec != user:
                return False, None
        grabbed_user = user
    else:
        grabbed_user = None

    if not process_pattern:
        return (), grabbed_user

    elif process_pattern.startswith("~"):
        reg = regex(process_pattern[1:]) # skip "~"
        matchobject = reg.match(" ".join(command_line))
        if matchobject:
            return [ g and g or "" for g in matchobject.groups() ], grabbed_user
    else:
        if command_line[0] == process_pattern:
            return (), grabbed_user

    return False, grabbed_user

def _filehandles_matches_check(process_line, process_pattern, user_pattern):
    user, command_line = process_line[2], process_line[3:]
    if user_pattern:
        if user_pattern.startswith('~'):
            if not regex(user_pattern[1:]).match(user):
                return False
        elif user_pattern != user:
            return False
    if not process_pattern:
        # Process name not relevant
        return True
    elif process_pattern.startswith("~"):
        # Regex for complete process command line
        reg = regex(process_pattern[1:]) # skip "~"
        return reg.match(" ".join(command_line))
    else:
        # Exact match on name of executable
        return command_line[0] == process_pattern

def inventory_filehandles(info):

    inventory = []
    rules = []
    
    for value in host_extra_conf(host_name(), inventory_filehandles_rules):
    # Extract the list of processes
    rules.append((value['descr'], value.get('match'), value.get('user')))
  
    for line in info:
        if line[1] == 'global':
            inventory.append( ('global', {}) )
        else:
            for servicedesc, pattern, userspec in rules:
                num_perc_s = servicedesc.count('%s')
                process_line = line[1:]
                matches, grabbed_user = _filehandles_matches_inventory(process_line, pattern, userspec)
                if matches == False:
                    continue
                if len(matches) < num_perc_s:
                    raise MKGeneralException("Invalid entry in inventory_filehandles_rules: service description '%s' contains "
                        "%d times '%%s', but regular expression '%s' contains only %d subexpression(s)." % \
                        (servicedesc, num_perc_s, pattern, len(matches)))
                if userspec == False:
                    i_userspec = grabbed_user
                    i_servicedesc = servicedesc.replace("%u", grabbed_user)
                else:
                    i_userspec = userspec
                    i_servicedesc = servicedesc
                for nr, group in enumerate(matches):
                    i_servicedesc = i_servicedesc.replace("%%%d" % (nr+1), group)
                i_servicedesc = i_servicedesc % tuple(matches[:num_perc_s])
                inv_params = {
                    'process' : pattern,
                    'user': i_userspec,
                }
                inv = ( i_servicedesc, inv_params )
                if inv not in inventory:
                    inventory.append(inv)
    return inventory
                
def check_filehandles(item, params, info):
    max_handles = None
    min_handles = None
    sum_handles = 0
    count = 0
    processes = []
    running_on_nodes = set()
    for line in info:
        if item == 'global' and line[1] == item:
            maxhandles = saveint(line[4])
            curhandles = saveint(line[2])
            perc = curhandles * 100 / maxhandles
            res = 0
            if 'levels' in params:
                perfdata = [ ( 'filehandles',
                               curhandles,
                               params['levels'][0] * maxhandles / 100,
                               params['levels'][1] * maxhandles / 100,
                               0,
                               maxhandles) ]
                if perc > params['levels'][1]:
                    res = 2
                elif perc > params['levels'][0]:
                    res = 1
            else:
                perfdata = [ ( 'filehandles', curhandles, None, None, 0, maxhandles) ]
            return res, '%d of %d Filehandles used' % ( curhandles, maxhandles ), perfdata
        else:
            node_name, process_line = line[0], line[1:]
            process_info, command_line = process_line[:3], process_line[3:]
            if _filehandles_matches_check(process_line, params.get('process'), params.get('user')):
                process = []
                count += 1
                handles = saveint(process_info[1])
                sum_handles += handles
                max_handles = max(max_handles, handles)
                if min_handles == None:
                    min_handles = handles
                else:
                    min_handles = min(min_handles, handles)
                if node_name != None:
                    running_on_nodes.add(node_name)
                process.append(('name', (command_line[0], '')))
                process.append(('user', (process_info[2], '')))
                process.append(('handles', (handles, '')))
                processes.append(process)
        
    avg_handles = sum_handles / count

    infotext = '%d processes with max. %d open files' % (count, max_handles)
    if running_on_nodes:
        infotext += ' [running on %s]' % ', '.join(running_on_nodes)

    state = 0
    if 'levels' in params:
        warn, crit = params['levels']
        perfdata = [ ( 'filehandles', max_handles, warn, crit ) ]
        if max_handles > crit:
            state = 2
        elif max_handles > warn:
            state = 1
    else:
        perfdata = [ ( 'filehandles', max_handles ) ]
    return state, infotext, perfdata

check_info['filehandles'] = {
    "inventory_function"      : inventory_filehandles,
    "check_function"          : check_filehandles,
    "service_description"     : "Filehandles %s",
    "has_perfdata"            : True,
    "node_info"               : True,
    "group"                   : "filehandles",
    "default_levels_variable" : "filehandles_default_levels",
}
