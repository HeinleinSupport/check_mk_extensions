#!/bin/bash

# (c) 2020 Heinlein Support GmbH
#          Robert Sander <r.sander@heinlein-support.de>

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  This file is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

shopt -s lastpipe

addNumbers () {
  local IFS='+'
  printf "%s\n" "$(( $* ))"
}

provisionedSpace () {
  # shellcheck disable=SC2046
  addNumbers $( find "$1" -type f | while read -r image; do
    qemu-img info "$image"
  done | awk '/^virtual size: / { print substr($5, 2) }' )
}

handleDirStorage() {
  local dir="$1" typ
  local -i capacity total_used used prov total_cap
  if [ -d "$dir/images" ]; then
    df -T -B 1 "$dir" | tail -1 | read -r _ typ capacity total_used _
    du -B 1 -s "$dir/images" | read -r used _
    # shellcheck disable=SC2046
    # prov=$(addNumbers $(ls --block-size=1 -l $dir/images/*/* 2> /dev/null | awk '{ print $5; }'))
    prov="$(provisionedSpace "$dir/images")"
    total_cap=$((capacity - total_used + used))
    echo "[$dsname]"
    echo "url $dir"
    echo "accessible True"
    echo "type $typ"
    echo "capacity $total_cap"
    echo "freeSpace $((total_cap - used))"
    if [ "$prov" -gt 0 ]; then
      echo "uncommitted $((prov - used))"
    else
      echo "uncommitted 0"
    fi
  fi
}

handleZfsStorage() {
  pool="$1"
  if ! command -V zfs > /dev/null; then
    return
  fi
  free="$(zfs get -Hpo value available "$pool")"
  used="$(zfs get -Hpo value used "$pool")"
  # shellcheck disable=SC2046
  prov="$(addNumbers $(zfs get -rHpo value volsize "$pool" | grep -vx -- -))"
  echo "[$dsname]"
  echo "url $pool"
  echo "accessible True"
  echo "type ZFS"
  echo "capacity $((free + used))"
  echo "freeSpace ${free}"
  if [ "$prov" -gt 0 ]; then
    echo "uncommitted $((prov - used))"
  else
    echo "uncommitted 0"
  fi
}

if [ -r /etc/pve/storage.cfg ]; then
  echo '<<<esx_vsphere_datastores>>>'
  while read -r key value; do
    if [[ "$key $value" =~ ^([^[:space:]]+):[[:space:]]*(.*)$ ]]; then
      dstype="${BASH_REMATCH[1]}"
      dsname="${BASH_REMATCH[2]}"
    elif [[ "$key" = "path" && ( "$dstype" = "dir" || "$dstype" = "nfs" ) ]]; then
      handleDirStorage "$value"
    elif [ "$key" = "pool" ] && [ "$dstype" = "zfspool" ]; then
      handleZfsStorage "$value"
    fi
  done < /etc/pve/storage.cfg
fi

pvesm=$(which pvesm)
if [ -x $pvesm ]; then
  echo '<<<esx_vsphere_datastores>>>'
  $pvesm status | grep lvm | while read dsname typ status total_cap used avail perc; do
    echo "[$dsname]"
    if [ "$status" = "active" ]; then
      echo "accessible True"
    else
      echo "accessible False"
    fi
    echo "type $typ"
    echo "capacity $(( $total_cap * 1024 ))"
    echo "freeSpace $(( $avail * 1024 ))"
    echo "uncommitted 0"
  done
fi
