#!/usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-

#
# (c) 2013 Heinlein Support GmbH
#          Robert Sander <r.sander@heinlein-support.de>
# (c) 2024 Jens Maus <mail@jens-maus.de>
#

from cmk.base.check_api import LegacyCheckDefinition, saveint
from cmk.base.config import check_info
from cmk.agent_based.v2 import all_of, contains, startswith, SNMPTree, StringTable

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  This file is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def _infortrend_chassis_name(name, id):
    if saveint(id) > 0:
        return "ID %s %s" % (id, name)
    return name

def inventory_infortrend_chassis(info):
    for name, status, type, value, unit, id in info:
        if status != '255':
            yield _infortrend_chassis_name(name, id), {}

def check_infortrend_chassis(item, params, info):
    status_info = {
        "1": { 'bits': { 0: ( "Power supply functioning normally", "Power supply malfunctioning" ),
                         6: ( "Power supply is ON", "Power supply is OFF" ),
                         7: ( "Power supply IS present", "Power supply is NOT present" ),
                         },
               },
        "2": { 'bits': { 0: ( "Fan functioning normally", "Fan malfunctioning" ),
                         6: ( "Fan is ON", "Fan is OFF" ),
                         7: ( "Fan IS present", "Fan is NOT present" ),
                         },
               },
        "3": { 'bits': { 0: ( "Temp. sensor functioning normally", "Temp. sensor malfunctioning" ),
                         6: ( "Temp. Sensor is Activated", "Temp. Sensor is NOT Activated" ),
                         7: ( "Temperature sensor IS present", "Temperature sensor is NOT present" ),
                         },
               'adtl_info': { 0: (0, "Temp. within safe range"),
                              2: (1, "Cold Temp. Warning"),
                              3: (1, "Hot Temp. Warning"),
                              4: (2, "Cold Temp. Limit Exceeded"),
                              5: (2, "Hot Temp. Limit Exceeded"),
                              },
               'adtl_func': lambda status: status >> 1 & 7,
               },
        "4": { 'bits': { 0: ( "Unit functioning normally", "Unit malfunctioning" ),
                         1: ( "AC Power present", "AC Power NOT present" ),
                         6: ( "UPS is ON", "UPS is OFF" ),
                         7: ( "UPS IS present", "UPS is NOT present" ),
                         },
               'adtl_info': { 0: (0, "battery fully charged"),
                              1: (1, "battery not fully charged"),
                              2: (2, "battery charge critically low"),
                              3: (2, "battery completely drained"),
                              },
               'adtl_func': lambda status: status >> 2 & 3,
               },
        "5": { 'bits': { 0: ( "Voltage sensor functioning normally", "Voltage sensor malfunctioning" ),
                         6: ( "Voltage Sensor is Activated", "Voltage Sensor is NOT Activated" ),
                         7: ( "Voltage sensor IS present", "Voltage sensor is NOT present" ),
                         },
               'adtl_info': { 0: (0, "Voltage within acceptable range"),
                              2: (1, "Low Voltage Warning"),
                              3: (1, "High Voltage Warning"),
                              4: (2, "Low Voltage Limit Exceeded"),
                              5: (2, "High Voltage Limit Exceeded"),
                              },
               'adtl_func': lambda status: status >> 1 & 7,
               },
        "6": { 'bits': { 0: ( "Current sensor functioning normally", "Current sensor malfunctioning" ),
                         6: ( "Current Sensor is Activated", "Current Sensor is NOT Activated" ),
                         7: ( "Current sensor IS present", "Current sensor is NOT present" ),
                         },
               'adtl_info': { 0: (0, "Current within acceptable range"),
                              3: (1, "Over Current Warning"),
                              5: (2, "Over Current Limit Exceeded"),
                              },
               'adtl_func': lambda status: status >> 1 & 7,
               },
        "9": { 'bits': { 0: ( "Door OK", "Door, door lock, or door sensor malfunctioning" ),
                         1: ( "Door is shut", "Door is open" ),
                         6: ( "Door lock engaged", "Door lock NOT engaged" ),
                         7: ( "Door IS present", "Door is NOT present" ),
                         },
               },
        "10": { 'bits': { 0: ("Speaker functioning normally", "Speaker malfunctioning" ),
                          6: ("Speaker is ON", "Speaker is OFF" ),
                          7: ("Speaker IS present", "Speaker is NOT present" ),
                          },
                },
        "11": { 'bits': { 0: ( "Battery functioning normally", "Battery malfunctioning" ),
                          1: ( "Battery charging OFF (or trickle)", "Battery charging ON" ),
                          6: ( "Battery-backup is enabled", "Battery-backup is disabled" ),
                          7: ( "Battery IS present", "Battery is NOT present" ),
                          },
                'adtl_info': { 0: (0, "battery fully charged"),
                               1: (1, "battery not fully charged"),
                               2: (2, "battery charge critically low"),
                               3: (2, "battery completely drained"),
                               },
                'adtl_func': lambda status: status >> 2 & 3,
                },
        "17": { 'bits': { 0: ( "Slot sense circuitry functioning normally", "Slot sense circuitry malfunctioning" ),
                          1: ( "Device in slot has not been marked 'needing replacement' or a replacement drive has been inserted", "Device in slot has been marked BAD and is awaiting replacement" ),
                          2: ( "Slot is activated so that drive can be accessed", "Slot NOT activated" ),
                          6: ( "Slot is NOT ready for insertion/removal", "Slot is ready for insertion/removal" ),
                          7: ( "Device inserted in slot", "Slot is empty" ),
                          },
                },
        }
    
    for name, status, type, value, unit, id in info:
        if _infortrend_chassis_name(name, id) == item:
            status = saveint(status)
            if status == 0:
                yield 0, status_info[type]['bits'][0][0]
                break
            if status == 255:
                yield 3, "Status unknown"
                break
            yield 0, "%d" % status
            for bit in status_info[type]['bits'].keys():
                bit_set = ( status & 1 << bit ) >> bit
                if bit_set and bit < 6:
                    yield 2, status_info[type]['bits'][bit][bit_set]
                else:
                    yield 0, status_info[type]['bits'][bit][bit_set]
            if 'adtl_info' in status_info[type]:
                adtl_status = status_info[type]['adtl_func'](status)
                yield status_info[type]['adtl_info'][adtl_status][0], status_info[type]['adtl_info'][adtl_status][1]

def parse_infortrend_chassis(string_table: StringTable) -> StringTable | None:
    return string_table or None

check_info["infortrend_chassis"] = LegacyCheckDefinition(
    detect=startswith(".1.3.6.1.2.1.1.2.0", ".1.3.6.1.4.1.1714.1.2"),
    parse_function=parse_infortrend_chassis,
    fetch=SNMPTree(
        base=".1.3.6.1.4.1.1714.1.1.9.1",
        oids=["8", "13", "6", "9", "10", "12"],
    ),
    service_name="IFT %s",
    discovery_function=inventory_infortrend_chassis,
    check_function=check_infortrend_chassis,
    check_ruleset_name="infortend_chassis",
)
