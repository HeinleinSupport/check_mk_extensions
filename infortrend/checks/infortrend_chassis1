#!/usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-

#
# (c) 2013 Heinlein Support GmbH
#          Robert Sander <r.sander@heinlein-support.de>
#

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  This file is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def inventory_infortrend_chassis1(info):
    # Debug: lets see how the data we get looks like
    inventory = []
    for name, status, devtype, value, unit in info:
        if devtype == '15' and not name:
            continue
        if devtype == '14' and status == '128':
            continue
        inventory.append( (name, status) )
    return inventory

def check_infortrend_chassis1(item, params, info):
    status_info = {
        # Power supply
        "1": { 'bits': { 0: ( "Power supply functioning normally", "Power supply malfunctioning" ),
                         6: ( "Power supply is ON", "Power supply is OFF" ),
                         7: ( "Power supply IS present", "Power supply is NOT present" ),
                         },
               },
        # Fan
        "2": { 'bits': { 0: ( "Fan functioning normally", "Fan malfunctioning" ),
                         6: ( "Fan is ON", "Fan is OFF" ),
                         7: ( "Fan IS present", "Fan is NOT present" ),
                         },
               },
        # Temperature sensor
        "3": { 'bits': { 0: ( "Temp. sensor functioning normally", "Temp. sensor malfunctioning" ),
                         6: ( "Temp. Sensor is Activated", "Temp. Sensor is NOT Activated" ),
                         7: ( "Temperature sensor IS present", "Temperature sensor is NOT present" ),
                         },
               'adtl_info': { 0: "Temp. within safe range",
                              2: "Cold Temp. Warning",
                              3: "Hot Temp. Warning",
                              4: "Cold Temp. Limit Exceeded",
                              5: "Hot Temp. Limit Exceeded",
                              },
               'adtl_func': lambda status: status >> 1 & 7,
               },
        # UPS
        "4": { 'bits': { 0: ( "Unit functioning normally", "Unit malfunctioning" ),
                         1: ( "AC Power present", "AC Power NOT present" ),
                         6: ( "UPS is ON", "UPS is OFF" ),
                         7: ( "UPS IS present", "UPS is NOT present" ),
                         },
               'adtl_info': { 0: "battery fully charged",
                              1: "battery not fully charged",
                              2: "battery charge critically low",
                              3: "battery completely drained",
                              },
               'adtl_func': lambda status: status >> 2 & 3,
               },
        # Voltage sensors
        "5": { 'bits': { 0: ( "Voltage sensor functioning normally", "Voltage sensor malfunctioning" ),
                         6: ( "Voltage Sensor is Activated", "Voltage Sensor is NOT Activated" ),
                         7: ( "Voltage sensor IS present", "Voltage sensor is NOT present" ),
                         },
               'adtl_info': { 0: "Voltage within acceptable range",
                              2: "Low Voltage Warning",
                              3: "High Voltage Warning",
                              4: "Low Voltage Limit Exceeded",
                              5: "High Voltage Limit Exceeded",
                              },
               'adtl_func': lambda status: status >> 1 & 7,
               },
        # Current sensors
        "6": { 'bits': { 0: ( "Current sensor functioning normally", "Current sensor malfunctioning" ),
                         6: ( "Current Sensor is Activated", "Current Sensor is NOT Activated" ),
                         7: ( "Current sensor IS present", "Current sensor is NOT present" ),
                         },
               'adtl_info': { 0: "Current within acceptable range",
                              3: "Over Current Warning",
                              5: "Over Current Limit Exceeded",
                              },
               'adtl_func': lambda status: status >> 1 & 7,
               },
        # Temperature Out-of-Range Flags
        "8": { },
        # Door
        "9": { 'bits': { 0: ( "Door OK", "Door, door lock, or door sensor malfunctioning" ),
                         1: ( "Door is shut", "Door is open" ),
                         6: ( "Door lock engaged", "Door lock NOT engaged" ),
                         7: ( "Door IS present", "Door is NOT present" ),
                         },
               },
        # Speaker
        "10": { 'bits': { 0: ("Speaker functioning normally", "Speaker malfunctioning" ),
                          6: ("Speaker is ON", "Speaker is OFF" ),
                          7: ("Speaker IS present", "Speaker is NOT present" ),
                          },
                },
        # Battery-backup battery
        "11": { 'bits': { 0: ( "Battery functioning normally", "Battery malfunctioning" ),
                          1: ( "Battery charging OFF (or trickle)", "Battery charging ON" ),
                          6: ( "Battery-backup is enabled", "Battery-backup is disabled" ),
                          7: ( "Battery IS present", "Battery is NOT present" ),
                          },
                'adtl_info': { 0: "battery fully charged",
                               1: "battery not fully charged",
                               2: "battery charge critically low",
                               3: "battery completely drained",
                               },
                'adtl_func': lambda status: status >> 2 & 3,
                },
        # LED
        "12": { 'bits': { 0: ( "", "" ),
                          6: ( "LED is active", "LED is inactive" ),
                          7: ( "LED is present", "LED is NOT present" ),
                          },
                },
        # Cache-Data-Backup Flash Device
        "13": { 'bits': { 0: ( "Flash Device functioning normally", "Flash Device malfunctioning" ),
                          6: ( "Flash Device is enabled", "Flash Device is disabled" ),
                          7: ( "Flash Device is present", "Flash Device is NOT present" ),
                          },
                },
        # Host Board
        "14": { 'bits': { 0: ( "Host Board IS present", "" ),
                          7: ( "Host Board IS present", "Host Board is NOT present" )
                          },
                },
        # Midplane/Backplane
        "15": { 'bits': { 0: ( "Midplane/Backplane", "" ) } },
        # Slot states
        "17": { 'bits': { 0: ( "Slot sense circuitry functioning normally", "Slot sense circuitry malfunctioning" ),
                          1: ( "Device in slot has not been marked 'needing replacement' or a replacement drive has been inserted", "Device in slot has been marked BAD and is awaiting replacement" ),
                          2: ( "Slot is activated so that drive can be accessed", "Slot NOT activated" ),
                          6: ( "Slot is NOT ready for insertion/removal", "Slot is ready for insertion/removal" ),
                          7: ( "Device inserted in slot", "Slot is empty" ),
                          },
                },
        # Enclosure drawer
        "18": { 'bits': { 0: ( "Enclosure Drawer functioning normally", "Enclosure Drawer malfunctioning" ),
                          6: ( "Enclosure Drawer is closed", "Enclosure Drawer is opened" ),
                          7: ( "Enclosure Drawer is present", "Enclosure Drawer is NOT present" ),
                          },
                },
        # Enclosure Management Services Controller
        "31": { 'bits': { 0: ( "Enclosure Management Services Controller functioning normally", "Enclosure Management Services Controller malfunctioning" ),
                          6: ( "Enclosure Management Services Controller is closed", "Enclosure Management Services Controller is opened" ),
                          7: ( "Enclosure Management Services Controller is present", "Enclosure Management Services Controller is NOT present" ),
                          },
                },
        }
    
    for name, status, devtype, value, unit in info:
        status = int(status)
        if name == item:
            if status == 0:
                return (0, status_info[devtype]['bits'][0][0])
            if status == 255:
                return (3, "Status unknown")
            output = []
            for bit in status_info[devtype]['bits'].keys():
                bit_set = ( status & 1 << bit ) >> bit
                if bit_set:
                    output.append("%s (!)" % status_info[devtype]['bits'][bit][bit_set])
                else:
                    output.append(status_info[devtype]['bits'][bit][bit_set])
            if 'adtl_info' in status_info[devtype]:
                adtl_status = status_info[devtype]['adtl_func'](status)
                if adtl_status > 0:
                    output.append("%s (!)" % status_info[devtype]['adtl_info'][adtl_status])
                else:
                    output.append(status_info[devtype]['adtl_info'][adtl_status])
            if status == 64:
                if devtype == '12':
                    return (0, ", ".join(output))
                else:
                    return (1, "%d %s" % ( status, ", ".join(output)))
            else:
                return (2, "%d %s" % ( status, ", ".join(output)))
    return (3, "not yet implemented")

check_info["infortrend_chassis1"] = {
    'check_function'        : check_infortrend_chassis1,
    'service_description'   : "IFT %s",
    'has_perfdata'          : False,
    'inventory_function'    : inventory_infortrend_chassis1,
    'snmp_scan_function'    : lambda oid: "infortrend" in oid(".1.3.6.1.2.1.1.1.0").lower() and oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.1714.1.1"),
    'snmp_info'             : ( ".1.3.6.1.4.1.1714.1.1.9.1", [ "8", "13", "6", "9", "10" ] ),
}
