#!/usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-

#
# (c) 2013 Heinlein Support GmbH
#          Robert Sander <r.sander@heinlein-support.de>
#

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  This file is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

from cmk.utils import quote_shell_string
from cmk.base.check_api import host_name
from cmk.base.config import get_config_cache
from functools import reduce

def _creds_to_args(creds):
    args = ''
    if isinstance(creds, str):
        args += ' -P 2c'
        args += ' -C %s' % quote_shell_string(creds)
    elif isinstance(creds, tuple):
        args += ' -P 3 -L %s' % creds[0]
        if creds[0] == 'noAuthNoPriv':
            args += ' -U %s' % quote_shell_string(creds[1])
        if creds[0] == 'authNoPriv':
            args += ' -a "%s"' % creds[1]
            args += ' -U %s' % quote_shell_string(creds[2])
            args += ' -A %s' % quote_shell_string(creds[3])
        if creds[0] == 'authPriv':
            args += ' -a "%s"' % creds[1]
            args += ' -U %s' % quote_shell_string(creds[2])
            args += ' -A %s' % quote_shell_string(creds[3])
            args += ' -x "%s"' % creds[4]
            args += ' -X %s' % quote_shell_string(creds[5])
    return args

def _all_none(l):
    return not (reduce(lambda x,y: x or y, l))

def _list_to_args(para, l):
    if _all_none(l):
        return ''
    return " %s %s" % (para, ",".join(map(lambda x: str(x) if x else '', l)))

def check_snmp_arguments(params):
    if 'hostname' in params:
        args = "-H %s" % quote_shell_string(params['hostname'])
    else:
        args = "-H $HOSTADDRESS$"

    if 'creds' in params:
        args += _creds_to_args(params['creds'])
    else:
        config_cache = get_config_cache()
        host_config = config_cache.get_host_config(host_name())
        snmp_config = host_config.snmp_config(None)
        credentials = snmp_config.credentials
        args += _creds_to_args(credentials)

    if "port" in params:
        args += " -p %d" % params["port"]
        
    if "timeout" in params:
        args += ' -t %d' % params["timeout"]

    oids = []
    warn = []
    crit = []
    for query in params['query']:
        oids.append(query['oid'])
        levels_upper = query.get('levels_upper')
        if levels_upper:
            warn.append(levels_upper[0])
            crit.append(levels_upper[1])
        else:
            warn.append(None)
            crit.append(None)
    if oids:
        args += " -m ALL -o %s" % ",".join(map(quote_shell_string, oids))
    args += _list_to_args('-w', warn)
    args += _list_to_args('-c', crit)

    if 'match' in params:
        mode, value = params['match']
        if mode == 'string':
            args += ' -s %s' % quote_shell_string(value)
        if mode == 'ereg':
            args += ' -r %s' % quote_shell_string(value)
        if mode == 'eregi':
            args += ' -R %s' % quote_shell_string(value)

    if 'invert' in params:
        args += ' --invert-search'

    if 'rate' in params:
        args += ' --rate --rate-multiplier %d' % params['rate']

    if 'offset' in params:
        args += ' --offset %d' % params['offset']

    return args

def check_snmp_description(params):
    if 'description' in params:
        return '%s' % params['description']
    
    return "%s" % params['oid']

active_check_info['snmp'] = {
    "command_line"        : "check_snmp $ARG1$",
    "argument_function"   : check_snmp_arguments,
    "service_description" : check_snmp_description,
    "has_perfdata"        : True,
}


