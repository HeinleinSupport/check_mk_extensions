#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

#
# (c) 2020 Heinlein Support GmbH
#          Robert Sander <r.sander@heinlein-support.de
#
# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def parse_wagner_racksens2(info):
    parsed = {
        u'info': [
            (u'Manufacturer', info[0][0][0]),
            (u'Unit name', info[0][0][1]),
            (u'Unit version', info[0][0][2]),
            (u'Unit serial', info[1][0][0]),
        ],
        u'airflow': (
            int(info[1][0][30]),
            float(info[1][0][9]),
            int(info[1][0][28]),
            int(info[1][0][29]),
        ),
        u'temps': [
            (u'Air', float(info[1][0][8]), None, None),
        ],
        u'detectors': {},
        u'alarms': {
            u'Extinguishing': int(info[0][0][3]),
            u'Cut Off': int(info[0][0][4]),
            u'Manual': int(info[0][0][5]),
            u'Failure': int(info[0][0][15]),
            u'Service or Blocked': int(info[0][0][16]),
            u'Door': int(info[0][0][17]),
            u'Main': int(info[0][0][18]),
            u'Battery': int(info[1][0][31]),
            },
        }
    for detector in [1, 2]:
        serial = int(info[1][0][detector])
        if serial > 0:
            parsed[u'detectors'][detector] = {
                u'serial': serial,
                u'mainalarm': int(info[0][0][detector + 5]),
                u'prealarm': int(info[0][0][detector + 7]),
                u'smoke': float(info[1][0][detector + 9]),
                u'chamber': int(info[1][0][detector + 20]),
            }
    for temp in [1, 2, 3, 4, 5]:
        if int(info[1][0][temp + 22]):
            parsed[u'temps'].append( (u'%d' % temp,
                                      float(info[1][0][temp + 2]),
                                      float(info[1][0][temp + 13]),
                                      int(info[0][0][temp + 9])) )
    return parsed

#.
#   .--info----------------------------------------------------------------.
#   |                          _        __                                 |
#   |                         (_)_ __  / _| ___                            |
#   |                         | | '_ \| |_ / _ \                           |
#   |                         | | | | |  _| (_) |                          |
#   |                         |_|_| |_|_|  \___/                           |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   |                                                                      |
#   '----------------------------------------------------------------------'

def inventory_wagner_racksens2(parsed):
    if u'info' in parsed:
        yield None, None

def check_wagner_racksens2(_no_item, _no_params, parsed):
    for key, value in parsed.get(u'info', []):
        yield 0, "%s: %s" % (key, value)

check_info['wagner_racksens2'] = {
    "parse_function": parse_wagner_racksens2,
    "inventory_function": inventory_wagner_racksens2,
    "check_function": check_wagner_racksens2,
    "service_description": "Racksens2 Info",
    "snmp_info": [ (".1.3.6.1.4.1.34187.57949.1.1", [ "1",      # RACKSENS2-MIB::rsManufacturer              0
                                                      "2",      # RACKSENS2-MIB::rsUnitName                  1
                                                      "3",      # RACKSENS2-MIB::rsUnitVersion               2
                                                      "1000",   # RACKSENS2-MIB::pswExtinguishing            3
                                                      "1001",   # RACKSENS2-MIB::pswCutOffActive             4
                                                      "1002",   # RACKSENS2-MIB::pswManualActivation         5
                                                      "1003",   # RACKSENS2-MIB::pswMainAlarmD1              6
                                                      "1004",   # RACKSENS2-MIB::pswMainAlarmD2              7
                                                      "1005",   # RACKSENS2-MIB::pswPreAlarmD1               8
                                                      "1006",   # RACKSENS2-MIB::pswPreAlarmD2               9
                                                      "1007",   # RACKSENS2-MIB::pswTemperatureAlarm1       10
                                                      "1008",   # RACKSENS2-MIB::pswTemperatureAlarm2       11
                                                      "1009",   # RACKSENS2-MIB::pswTemperatureAlarm3       12
                                                      "1010",   # RACKSENS2-MIB::pswTemperatureAlarm4       13
                                                      "1011",   # RACKSENS2-MIB::pswTemperatureAlarm5       14
                                                      "1012",   # RACKSENS2-MIB::pswFailure                 15
                                                      "1013",   # RACKSENS2-MIB::pswServiceOrBlocked        16
                                                      "1014",   # RACKSENS2-MIB::pswDoorState               17
                                                      "1015",   # RACKSENS2-MIB::pswUnitMainAlarm           18
                                                     ]),
                   (".1.3.6.1.4.1.34187.57949.2.1", [ "24577",  # RACKSENS2-MIB::rsUnitSerialNumber          0
                                                      "24578",  # RACKSENS2-MIB::rsDetector1SerialNumber     1
                                                      "24579",  # RACKSENS2-MIB::rsDetector2SerialNumber     2
                                                      "245800000",  # RACKSENS2-MIB::rsTemperature1String    3
                                                      "245810000",  # RACKSENS2-MIB::rsTemperature2String    4
                                                      "245820000",  # RACKSENS2-MIB::rsTemperature3String    5
                                                      "245830000",  # RACKSENS2-MIB::rsTemperature4String    6
                                                      "245840000",  # RACKSENS2-MIB::rsTemperature5String    7
                                                      "245850000",  # RACKSENS2-MIB::rsAirTemperatureString  8
                                                      "245860000",  # RACKSENS2-MIB::rsAirFlowSpeedString    9
                                                      "245940000",  # RACKSENS2-MIB::rsSmokeLevel1String    10
                                                      "245990000",  # RACKSENS2-MIB::rsSmokeLevel2String    11
                                                      "246050000",  # RACKSENS2-MIB::rsSensibility1String   12
                                                      "246060000",  # RACKSENS2-MIB::rsSensibility2String   13
                                                      "246070000",  # RACKSENS2-MIB::rsAlarmTemp1String     14
                                                      "246080000",  # RACKSENS2-MIB::rsAlarmTemp2String     15
                                                      "246090000",  # RACKSENS2-MIB::rsAlarmTemp3String     16
                                                      "246100000",  # RACKSENS2-MIB::rsAlarmTemp4String     17
                                                      "246110000",  # RACKSENS2-MIB::rsAlarmTemp5String     18
                                                      "246120000",  # RACKSENS2-MIB::rsFanVoltageString     19
                                                      "246260000",  # RACKSENS2-MIB::rsFlowReferenceString  20
                                                      "24595",  # RACKSENS2-MIB::rsChamberState1            21
                                                      "24600",  # RACKSENS2-MIB::rsChamberState2            22
                                                      "24590037", # RACKSENS2-MIB::rsTempSensor1Registrated 23
                                                      "24590038", # RACKSENS2-MIB::rsTempSensor2Registrated 24
                                                      "24590039", # RACKSENS2-MIB::rsTempSensor3Registrated 25
                                                      "24590040", # RACKSENS2-MIB::rsTempSensor4Registrated 26
                                                      "24590041", # RACKSENS2-MIB::rsTempSensor5Registrated 27
                                                      "24587",  # RACKSENS2-MIB::rsAirFlowdeviation         28
                                                      "24602",  # RACKSENS2-MIB::rsAirFlowFailureThreshold  29
                                                      "24590042", # RACKSENS2-MIB::rsAirFlowControlAvailable 30
                                                      "24590058", # RACKSENS2-MIB::rsBatteryFailure         31
                                                     ]),
                   ],
    "snmp_scan_function": lambda oid: oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.34187.57949",
}

#.
#   .--detector------------------------------------------------------------.
#   |                    _      _            _                             |
#   |                 __| | ___| |_ ___  ___| |_ ___  _ __                 |
#   |                / _` |/ _ \ __/ _ \/ __| __/ _ \| '__|                |
#   |               | (_| |  __/ ||  __/ (__| || (_) | |                   |
#   |                \__,_|\___|\__\___|\___|\__\___/|_|                   |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   |                                                                      |
#   '----------------------------------------------------------------------'

factory_settings["wagner_racksens2.detector_defaultlevels"] = {
    "smoke_levels": (3, 5),
    "chamber_levels": (10, 20),
}

def inventory_wagner_racksens2_detector(parsed):
    for d in parsed.get(u'detectors', {}).keys():
        yield d, {}

def check_wagner_racksens2_detector(item, params, parsed):
    for d, vals in parsed.get(u'detectors', {}).items():
        if item == d:
            yield 0, u"Serial: %d" % vals[u'serial']
            if vals[u'prealarm']:
                yield 1, u"Action Alarm"
            if vals[u'mainalarm']:
                yield 2, u"Fire Alarm"
            warn, crit = params[u'smoke_levels']
            if vals[u'smoke'] > crit:
                status = 2
            elif vals[u'smoke'] > warn:
                status = 1
            else:
                status = 0
            yield status, u"%0.6f%% smoke detected" % vals[u'smoke'], [("smoke_perc", vals[u'smoke'], warn, crit)]
            warn, crit = params[u'chamber_levels']
            if abs(vals[u'chamber']) > crit:
                status = 2
            elif abs(vals[u'chamber']) > warn:
                status = 1
            else:
                status = 0
            yield status, u"%d%% chamber deviation" % vals[u'chamber'], [("chamber_perc", vals[u'chamber'], warn, crit)]

check_info['wagner_racksens2.detector'] = {
    "inventory_function": inventory_wagner_racksens2_detector,
    "check_function": check_wagner_racksens2_detector,
    "service_description": "Racksens2 Detector %s",
    "has_perfdata": True,
    "default_levels_variable": "wagner_racksens2.detector_defaultlevels",
    }

#.
#   .--temperature---------------------------------------------------------.
#   |      _                                      _                        |
#   |     | |_ ___ _ __ ___  _ __   ___ _ __ __ _| |_ _   _ _ __ ___       |
#   |     | __/ _ \ '_ ` _ \| '_ \ / _ \ '__/ _` | __| | | | '__/ _ \      |
#   |     | ||  __/ | | | | | |_) |  __/ | | (_| | |_| |_| | | |  __/      |
#   |      \__\___|_| |_| |_| .__/ \___|_|  \__,_|\__|\__,_|_|  \___|      |
#   |                       |_|                                            |
#   +----------------------------------------------------------------------+
#   |                                                                      |
#   '----------------------------------------------------------------------'

def inventory_wagner_racksens2_temp(parsed):
    for temp in parsed.get(u'temps', []):
        yield temp[0], {}

def check_wagner_racksens2_temp(item, params, parsed):
    for temp in parsed.get(u'temps', []):
        if temp[0] == item:
            if temp[2] is None or temp[3] is None:
                yield check_temperature(
                    temp[1],
                    params,
                    u'wagner_recksens2_temperature_%s' % item)
            else:
                yield check_temperature(
                    temp[1],
                    params,
                    u'wagner_recksens2_temperature_%s' % item,
                    dev_levels = (temp[2], temp[2]),
                    dev_status = temp[3] * 2,
                    dev_status_name = u'Alarm')

check_info['wagner_racksens2.temp'] = {
    "inventory_function": inventory_wagner_racksens2_temp,
    "check_function": check_wagner_racksens2_temp,
    "service_description": "Racksens2 Temp %s",
    "has_perfdata": True,
    "group": "temperature",
    "includes": ["temperature.include"],    
    }

#.
#   .--alarms--------------------------------------------------------------.
#   |                        _                                             |
#   |                   __ _| | __ _ _ __ _ __ ___  ___                    |
#   |                  / _` | |/ _` | '__| '_ ` _ \/ __|                   |
#   |                 | (_| | | (_| | |  | | | | | \__ \                   |
#   |                  \__,_|_|\__,_|_|  |_| |_| |_|___/                   |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   |                                                                      |
#   '----------------------------------------------------------------------'

def inventory_wagner_racksens2_alarm(parsed):
    for alarm in parsed.get(u'alarms', {}).keys():
        yield alarm, None

def check_wagner_racksens2_alarm(item, _no_params, parsed):
    for alarm, status in parsed.get(u'alarms', {}).items():
        if alarm == item:
            yield status * 2, "Status: %d" % status

check_info['wagner_racksens2.alarm'] = {
    "inventory_function": inventory_wagner_racksens2_alarm,
    "check_function": check_wagner_racksens2_alarm,
    "service_description": "Racksens2 Alarm %s",
    }

#.
#   .--air flow deviation--------------------------------------------------.
#   |              _         __ _                     _                    |
#   |         __ _(_)_ __   / _| | _____      __   __| | _____   __        |
#   |        / _` | | '__| | |_| |/ _ \ \ /\ / /  / _` |/ _ \ \ / /        |
#   |       | (_| | | |    |  _| | (_) \ V  V /  | (_| |  __/\ V /         |
#   |        \__,_|_|_|    |_| |_|\___/ \_/\_/    \__,_|\___| \_/          |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   |                                                                      |
#   '----------------------------------------------------------------------'

def inventory_wagner_racksens2_airflow(parsed):
    if parsed[u'airflow'][0]:
        yield None, None

def check_wagner_racksens2_airflow(_no_item, _no_params, parsed):
    airflow = parsed[u'airflow']
    if airflow[0]:
        yield 0, "%0.4f m/s" % airflow[1], [ (u'airflow_meter', airflow[1]) ]
        crit = airflow[3]
        state = 0
        if abs(airflow[2]) > crit:
            state = 2
        yield state, "%d%% deviation" % airflow[2], [ (u'deviation_airflow', airflow[2], None, crit) ]

check_info['wagner_racksens2.airflow'] = {
    "inventory_function": inventory_wagner_racksens2_airflow,
    "check_function": check_wagner_racksens2_airflow,
    "service_description": "Racksens2 Airflow",
    "has_perfdata": True,
    }
