#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

netapp_iscsiluns_default_levels = { "read" : (None, None), "write" : (None, None), "readops" : (None, None), "writeops" : (None, None)}

def inventory_netapp_iscsiluns(info):
    return map(lambda x: (x[0], netapp_iscsiluns_default_levels), info)

def check_netapp_iscsiluns(item, params, info):
    for line in info:
        if line[0] != item:
            continue
        size = saveint(line[2])
        read = saveint(line[3])
        write = saveint(line[4])
        readops = saveint(line[5])
        writeops = saveint(line[6])
        
        this_time = int(time.time())
        timedif, avg_read  = get_counter("netapp_iscsiluns.%s.read" % item, this_time, read)
        timedif, avg_write  = get_counter("netapp_iscsiluns.%s.write" % item, this_time, write)
        timedif, avg_readops  = get_counter("netapp_iscsiluns.%s.readops" % item, this_time, readops)
        timedif, avg_writeops  = get_counter("netapp_iscsiluns.%s.writeops" % item, this_time, writeops)

        read_warn, read_crit = params['read']
        write_warn, write_crit = params['write']
        readops_warn, readops_crit = params['readops']
        writeops_warn, writeops_crit = params['writeops']

        perfdata = [("write", avg_write, write_warn, write_crit ),
                    ("read", avg_read, read_warn, read_crit ),
                    ("writeops", avg_writeops, writeops_warn, writeops_crit ),
                    ("readops", avg_readops, readops_warn, readops_crit ),
                    ("size", size),
                   ]
        state = 0
        read_msg = ''
        write_msg = ''
        readops_msg = ''
        writeops_msg = ''
        if read_warn != None and read_warn >= read:
            state = 1
            read_msg = ' (!)'
        if read_crit != None and read_crit >= read:
            state = 2
            read_msg = ' (!!)'

        if write_warn != None and write_warn >= write:
            state = max(state, 1)
            write_msg = ' (!)'
        if write_crit != None and write_crit >= write:
            state = 2
            write_msg = ' (!!)'

        if readops_warn != None and readops_warn >= readops:
            state = max(state, 1)
            readops_msg = ' (!)'
        if readops_crit != None and readops_crit >= readops:
            state = 2
            readops_msg = ' (!!)'

        if writeops_warn != None and writeops_warn >= writeops:
            state = max(state, 1)
            writeops_msg = ' (!)'
        if writeops_crit != None and writeops_crit >= writeops:
            state = 2
            writeops_msg = ' (!!)'


        infotext = "Size: %s, %s read%s, %s write%s, %0.4f readOps%s, %0.4f writeOps%s in last %d sec" % (
            get_bytes_human_readable(size),
            get_bytes_human_readable(avg_read), read_msg,
            get_bytes_human_readable(avg_write), write_msg,
            avg_readops, readops_msg,
            avg_writeops, writeops_msg,
            timedif)

        return(state, infotext, perfdata)
    return(3, "LUN %s not found" % item)

check_info["netapp_iscsiluns"] = {
    "check_function"        : check_netapp_iscsiluns,
    "inventory_function"    : inventory_netapp_iscsiluns,
    "service_description"   : "iSCSI LUN %s",
    "has_perfdata"          : True,
    "group"                 : "netapp_iscsiluns",
    "snmp_scan_function"    : lambda oid: oid(".1.3.6.1.4.1.789.1.17.15.1.0"),
    "snmp_info"		    : ( ".1.3.6.1.4.1.789.1.17.15.2.1", [ 2, 17, 28, 30, 31, 33, 34, ]),
}

