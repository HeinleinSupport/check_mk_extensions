#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

#
# (C) 2015 Heinlein Support GmbH
# Robert Sander <r.sander@heinlein-support.de>
#

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  This file is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

from ConfigParser import SafeConfigParser
import argparse
import os
from pprint import pprint

# https://github.com/jasonhancock/cloudstack-python-client
import CloudStack

try:
    checkmkconfdir = os.environ['MK_CONFDIR']
except KeyError:
    checkmkconfdir = '/etc/check_mk'

if __name__ == "__main__":

    #
    # read cmdline arguments
    #

    parser = argparse.ArgumentParser()
    parser.add_argument('-u', '--url', required=False, help='URL of CloudStack API')
    parser.add_argument('-s', '--secretkey', required=False, help='CloudStack API secret')
    parser.add_argument('-a', '--apikey', required=False, help='CloudStack API key')
    parser.add_argument('--config',
                        required=False,
                        default=['%s/cloudstack.ini' % checkmkconfdir,
                                 '/root/.cloudmonkey/config',
                                 '/etc/cloudstack/cloudmonkey/config',],
                        help='Path to configuration file')
    parser.add_argument('-p', '--profile', required=False, default='local', help='CloudStack config profile section name')
    args = parser.parse_args()

    config = {'url': None, 'apikey': None, 'secretkey': None}

    if args.config:
        cfg = SafeConfigParser()
        cfg.read(args.config)
        if cfg.has_section(args.profile):
            for key in config.keys():
                if cfg.has_option(args.profile, key):
                    config[key] = cfg.get(args.profile, key)
    for key in config.keys():
        if args.__dict__[key]:
            config[key] = args.__dict__[key]

    cloudstack = CloudStack.Client(config['url'],
                                   config['apikey'],
                                   config['secretkey'])

    hosts = {}
    for host in cloudstack.listHosts(args={'type': 'Routing'}):
        hosts[host['id']] = host
        print '<<<<%s>>>>' % host['name']
        print '<<<local>>>'
        if (host['resourcestate'] == 'Maintenance'):
            res = 0
        else:
            res = 1
            if (host['state'] == 'Up'):
                res = 0
            elif (host['state'] == 'Down'):
                res = 1
            elif (host['state'] == 'Disconnected'):
                res = 1
            elif (host['state'] == 'Alert'):
                res = 2
        print '%d %s_State - State is %s (%s)' % (res,
                                                  host['hypervisor'].replace(' ', '_'),
                                                  host['resourcestate'],
                                                  host['state'])
        if host['resourcestate'] == 'Enabled':
            print 'P %s_CPU used=%s;90;95;0;100|allocated=%s CPU' % (host['hypervisor'].replace(' ', '_'),
                                                                     host['cpuused'].replace(',', '.').replace('%', ''),
                                                                     host['cpuallocated'].replace(',', '.').replace('%', ''))
            print '0 %s_Memory used=%dB;;;0;%d|allocated=%dB Memory' % (host['hypervisor'].replace(' ', '_'),
                                                                        host['memoryused'],
                                                                        host['memorytotal'],
                                                                        host['memoryallocated'])
        else:
            print '0 %s_CPU used=0;90;95;0;100|allocated=%s CPU' % (host['hypervisor'].replace(' ', '_'),
                                                                    host['cpuallocated'].replace(',', '.').replace('%', ''))
            print '0 %s_Memory used=0B;;;0;%d|allocated=%dB Memory' % (host['hypervisor'].replace(' ', '_'),
                                                                       host['memorytotal'],
                                                                       host['memoryallocated'])
        print '<<<<>>>>'
    # for host in hosts:
    #     pprint(host)
    # pprint(cloudstack.listHosts())
    print '<<<esx_vsphere_datastores:sep(9)>>>'
    for storage in cloudstack.listStoragePools():
        if not storage.has_key('disksizeused'):
            storage['disksizeused'] = 0
        print '[%s/%s/%s]' % (storage['clustername'], storage['podname'], storage['name'])
        if storage['state'] == 'Up':
            print 'accessible\ttrue'
        else:
            print 'accessible\tfalse'
        print 'capacity\t%d' % storage['disksizetotal']
        print 'freeSpace\t%d' % (storage['disksizetotal'] - storage['disksizeused'])
        print 'maintenanceMode\tnormal'
        print 'type\tACS-Pool'
        uncommitted = storage['disksizeallocated'] - storage['disksizeused']
        if uncommitted < 0:
            uncommitted = 0
        print 'uncommitted\t%d' % uncommitted
        # print 'disksizeallocated\t%d' % storage['disksizeallocated']
        # print 'disksizeused\t%d' % storage['disksizeused']
        print 'url\tds:///ACS/%s/%s/%s' % (storage['clustername'], storage['podname'], storage['name'])
#        print "/%s/%s/%s ACS-Pool %d %d %d %d%% ACS/%s/%s/%s" % (
#            storage['clustername'], storage['podname'], storage['name'],
#            storage['disksizetotal'],
#            storage['disksizeused'],
#            storage['disksizetotal'] - storage['disksizeused'],
#            storage['disksizeused'] * 100 / storage['disksizetotal'],
#            storage['clustername'], storage['podname'], storage['name'])

    print '<<<local>>>'

    #
    # check for SystemVM
    # csLeastRunningSystemVM[systemvmtype] count = actual count, running = actual running, least = defined necessity, description and msg are output strings
    #
    csLeastRunningSystemVM = {
                               'consoleproxy':       {'count': 0, 'least': 1, 'description': 'ACS_SystemVM_Console_Proxy',     'msg': [], 'running': 0},
                               'secondarystoragevm': {'count': 0, 'least': 1, 'description': 'ACS_SystemVM_Secondary_Storage', 'msg': [], 'running': 0}
                             }
    for systemvm in cloudstack.listSystemVms():
        if systemvm['systemvmtype'] in csLeastRunningSystemVM:
            csLeastRunningSystemVM[systemvm['systemvmtype']]['count'] += 1
            if systemvm['state'] == 'Running':
                csLeastRunningSystemVM[systemvm['systemvmtype']]['running'] += 1
                csLeastRunningSystemVM[systemvm['systemvmtype']]['msg'].append('%s [%s] on %s' % (systemvm['name'], systemvm['publicip'], systemvm['hostname']))
            else:
                csLeastRunningSystemVM[systemvm['systemvmtype']]['msg'].append('%s [%s] state is %s(!!)' % (systemvm['name'], systemvm['publicip'], systemvm['state']))

    for systemVmType in csLeastRunningSystemVM:
        res = 0
        if csLeastRunningSystemVM[systemVmType]['running'] < csLeastRunningSystemVM[systemVmType]['count']:
            res = 1
        if csLeastRunningSystemVM[systemVmType]['count'] < csLeastRunningSystemVM[systemVmType]['least']:
            res = 2
        if csLeastRunningSystemVM[systemVmType]['running'] < csLeastRunningSystemVM[systemVmType]['least']:
            res = 2
        if csLeastRunningSystemVM[systemVmType]['count'] == 0:
            res = 2
            csLeastRunningSystemVM[systemvm['systemvmtype']]['msg'].append('No systemvm defined nor running(!!)')
        print '%d %s INSTANCES=%d;%d;0 %s' % (res, 
                                              csLeastRunningSystemVM[systemVmType]['description'],
                                              csLeastRunningSystemVM[systemVmType]['running'],
                                              (csLeastRunningSystemVM[systemVmType]['least'] - 1),
                                              ', '.join(csLeastRunningSystemVM[systemVmType]['msg']) )

    csAlertTypes = { 'MEMORY' : 0,
                     'CPU': 1,
                     'STORAGE': 2,
                     'STORAGE_ALLOCATED': 3,
                     'PUBLIC_IP': 4,
                     'PRIVATE_IP': 5,
                     'SECONDARY_STORAGE': 6,
                     'HOST': 7,
                     'USERVM': 8,
                     'DOMAIN_ROUTER': 9,
                     'CONSOLE_PROXY': 10,
                     'ROUTING': 11,
                     'STORAGE_MISC': 12,
                     'USAGE_SERVER': 13,
                     'MANAGMENT_NODE': 14,
                     'DOMAIN_ROUTER_MIGRATE': 15,
                     'CONSOLE_PROXY_MIGRATE': 16,
                     'USERVM_MIGRATE': 17,
                     'VLAN': 18,
                     'SSVM': 19,
                     'USAGE_SERVER_RESULT': 20,
                     'STORAGE_DELETE': 21,
                     'UPDATE_RESOURCE_COUNT': 22,
                     'USAGE_SANITY_RESULT': 23,
                     'DIRECT_ATTACHED_PUBLIC_IP': 24,
                     'LOCAL_STORAGE': 25,
                     'RESOURCE_LIMIT_EXCEEDED': 26,
                     'SYNC': 27,
                     'UPLOAD_FAILED': 28,
                     'OOBM_AUTH_ERROR': 29 }
    csAlertTypeWarn = [ 0,1,2,3,4,5,6,8,9,12,13,15,16,18,19,23,26 ]
    csAlertTypeCrit = [ 7,10,11,14 ]
    csAlerts = []
    csAlertRes = 0
    csAlertMsg = ''
    for csAlert in cloudstack.listAlerts():
        csAlertMsg = '%s (%s) %s' % (csAlert['description'], csAlert['name'], csAlert['sent'])
        if csAlert['type'] in csAlertTypeWarn:
            csAlertRes = max(1, csAlertRes)
            csAlertMsg += '(!)'
        if csAlert['type'] in csAlertTypeCrit:
            csAlertRes = 2
            csAlertMsg += '(!!)'
        csAlerts.append(csAlertMsg)
        
    if len(csAlerts) == 0:
        msg = 'no uncleared alerts.'
    elif len(csAlerts) == 1:
        msg = csAlerts[0]
    else:
        msg = '%d alerts. Most recent: %s\\n%s' % (len(csAlerts), csAlerts[0], "\\n".join(csAlerts))
    print '%d ACS_Alerts - %s' % (csAlertRes, msg)

    for capacity in cloudstack.listCapacity()['capacity']:
        if (capacity['type'] == 0):
            critReserve = capacity['capacitytotal']/12
            warnReserve = capacity['capacitytotal']/10
            print 'P ACS_Memory_Used_RAM mem_used=%d;%d;%d;0;%d %d Bytes RAM available, %s%% used' % (capacity['capacityused'],
                                                                                               capacity['capacitytotal'] - warnReserve,
                                                                                               capacity['capacitytotal'] - critReserve,
                                                                                               capacity['capacitytotal'],
                                                                                               capacity['capacitytotal'],
                                                                                               capacity['percentused'] )
        if (capacity['type'] == 3):
            usedperc = float(capacity['capacityused']) * 100.0 / float(capacity['capacitytotal'])
            critReserve = 100 - 100.0/12.0
            warnReserve = 100 - 100.0/10.0
            print 'P ACS_CPU_Used util=%0.4f;%0.4f;%0.4f;0;100 %d Hz CPU available, %s%% used' % (usedperc,
                                                                                              warnReserve,
                                                                                              critReserve,
                                                                                              capacity['capacitytotal'],
                                                                                              capacity['percentused'] )
        if (capacity['type'] == 4):
            warn = capacity['capacitytotal'] * 0.90
            crit = capacity['capacitytotal'] * 0.95
            print 'P ACS_Public_IPs count=%d;%d;%d;0;%d %d pubic IPs available, %s%% used' % (capacity['capacityused'],
                                                                                    warn,
                                                                                    crit,
                                                                                    capacity['capacitytotal'],
                                                                                    capacity['capacitytotal'],
                                                                                    capacity['percentused'] )
        if (capacity['type'] == 5):
            warn = capacity['capacitytotal'] * 0.90
            crit = capacity['capacitytotal'] * 0.95
            print 'P ACS_Management_IPs count=%d;%d;%d;0;%d %d management IPs available, %s%% used' % (capacity['capacityused'],
                                                                                    warn,
                                                                                    crit,
                                                                                    capacity['capacitytotal'],
                                                                                    capacity['capacitytotal'],
                                                                                    capacity['percentused'] )
        if (capacity['type'] == 7):
            warn = capacity['capacitytotal'] * 0.90
            crit = capacity['capacitytotal'] * 0.95
            print 'P ACS_VLAN/VNI count=%d;%d;%d;0;%d %d VLAN IDs available, %s%% used' % (capacity['capacityused'],
                                                                                    warn,
                                                                                    crit,
                                                                                    capacity['capacitytotal'],
                                                                                    capacity['capacitytotal'],
                                                                                    capacity['percentused'] )
        if (capacity['type'] == 8):
            warn = capacity['capacitytotal'] * 0.90
            crit = capacity['capacitytotal'] * 0.95
            print 'P ACS_Shared_Network_IPs count=%d;%d;%d;0;%d %d shared network IPs available, %s%% used' % (capacity['capacityused'],
                                                                                    warn,
                                                                                    crit,
                                                                                    capacity['capacitytotal'],
                                                                                    capacity['capacitytotal'],
                                                                                    capacity['percentused'] )
    # pprint(cloudstack.listSnapshots())
    # pprint(cloudstack.listAccounts())
    # pprint(cloudstack.listDomains())
    # pprint(cloudstack.listProjects())
    # pprint(cloudstack.listZones())
    # pprint(cloudstack.listInstanceGroups(args={'isrecursive': 'true', 'listall': 'true'}))
    # pprint(cloudstack.listPods())
    # pprint(cloudstack.listClusters())
    # pprint(cloudstack.listSSHKeyPairs(args={'isrecursive': 'true', 'listall': 'true'}))
    # pprint(cloudstack.listResourceLimits(args={'isrecursive': 'true', 'listall': 'true'}))
    # pprint(cloudstack.listConfigurations())
    # pprint(cloudstack.listPublicIpAddresses(args={'isrecursive': 'true', 'listall': 'true'}))
    # pprint(cloudstack.listEvents(args={'isrecursive': 'true', 'listall': 'true', 'level': 'ERROR'}))
    # pprint(cloudstack.listCapacity()) 
    # pprint(cloudstack.listNetworks(args={'isrecursive': 'true', 'listall': 'true'}))
    # pprint(cloudstack.listVirtualMachines(args={'isrecursive': 'true', 'listall': 'true'}))
    # pprint(cloudstack.listUsageRecords(args={'startdate': '2015-11-16', 'enddate': '2015-11-17'}))
    # pprint(cloudstack.listVolumes(args={'isrecursive': 'true', 'listall': 'true'}))
    # pprint(cloudstack.listAlerts())
    # pprint(cloudstack.listHypervisors())
    # pprint(cloudstack.listLunsOnFiler(args={'poolname': 'ACS-LUN002-SATA'}))

    vms = {}
    networks = {}
    nic = { 'PTR': 0, 'PTR0': 0, 'PTR1': 1 }
    for domain in cloudstack.listDomains():
        # print 'domain', domain['id'], domain['path'], domain['name']
        for vm in cloudstack.listVirtualMachines(args={'domainid': domain['id'], 'isrecursive': 'true', 'listall': 'true'}):
            vms[vm['id']] = vm
        for net in cloudstack.listNetworks(args={'domainid': domain['id'], 'isrecursive': 'true', 'listall': 'true'}):
            networks[net['id']] = net
        for project in cloudstack.listProjects(args={'domainid': domain['id']}):
            # print 'project', project['id'], project['name']
            for vm in cloudstack.listVirtualMachines(args={'domainid': domain['id'], 'projectid': project['id'], 'isrecursive': 'true', 'listall': 'true'}):
                vms[vm['id']] = vm
            for net in cloudstack.listNetworks(args={'domainid': domain['id'], 'projectid': project['id'], 'isrecursive': 'true', 'listall': 'true'}):
                networks[net['id']] = net

    for vm in vms.values():
        # print 'vm', vm['id'], vm.get('domain', None), vm.get('project', None), vm['name'], vm['displayname'], vm['state'], vm.get('hostname', None)
        hostname = False
        for t in vm['tags']:
            for key in ['monitoring', 'PTR1', 'PTR0', 'PTR' ]:
                if t['key'] == key:
                    if '.' in t['value']:
                        hostname = t['value']
                        break
                    elif key in nic:
                        hostname = '%s.%s' % (t['value'], networks[vm['nic'][nic[key]]['networkid']]['networkdomain'])
                        break
            if hostname:
                print '<<<<%s>>>>' % hostname
                print '<<<esx_vsphere_vm>>>'
                print 'config.hardware.memoryMB %s' % vm['memory']
                print 'config.hardware.numCPU %s' % vm['cpunumber']
                print 'config.hardware.numCoresPerSocket 1'
                if vm['state'] == 'Running':
                    print 'runtime.host %s' % vm['hostname']
                    print 'runtime.powerState poweredOn'
                else:
                    print 'runtime.powerState poweredOff'
                print '<<<<>>>>'
                break
