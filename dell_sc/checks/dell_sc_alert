#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# (c) 2017 Heinlein Support GmbH
#          Robert Sander <r.sander@heinlein-support.de>

#
# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def inventory_dell_sc_alert(info):
    return [(None, None)]

def check_dell_sc_alert(_no_item, params, info):
    state = {
        1  : ('complete', 0),
        2  : ('critical', 2),
        3  : ('degraded', 1),
        4  : ('down', 2),
        5  : ('emergency', 2),
        6  : ('inform', 0),
        7  : ('okay', 0),
        8  : ('unavailable', 2),
        9  : ('unknown', 3),
        }
    category = {
        0  : 'connectivity',
        1  : 'disk',
        2  : 'hardware',
        3  : 'storage',
        4  : 'system',
        5  : 'unknown',
        }
    atype = {
        0  : 'alert',
        1  : 'indication',
        2  : 'unknown',
        }
    alerts = []
    res = 0
    for nbr, istate, definition, icat, ctime, message, itype, ack, act in info:
        if act == "1" and ack == "2":
            alert_state = state.get(saveint(istate), ('unknown', 3))
            if res == 0:
                res = alert_state[1]
            if res == 1 and alert_state[1] == 2:
                res = 2
            alerts.append("%s %s %s on %s: %s%s" % (alert_state[0],
                                                    category.get(saveint(icat), 'unknown'),
                                                    definition,
                                                    ctime,
                                                    message,
                                                    state_markers[alert_state[1]]))
    if not alerts:
        alerts = ['No Alerts']
    return res, "%s\n%s" % (alerts[0], "\n".join(alerts[1:]))

check_info["dell_sc_alert"] = {
    'check_function'        : check_dell_sc_alert,
    'inventory_function'    : inventory_dell_sc_alert,
    'service_description'   : 'Dell SC Alert',
    'has_perfdata'          : True,
    'snmp_info'             : ('.1.3.6.1.4.1.674.11000.2000.500.1.2.46.1', [
        '2',    # scAlertNbr
        '3',    # scAlertStatus
        '5',    # scAlertDefinition
        '6',    # scAlertCategory
        '7',    # scAlertCreateTime
        '8',    # scAlertMessage
        '9',    # scAlertType
        '10',   # scAlertAcknowledged
        '11',   # scAlertActive
        ] ),
    'snmp_scan_function'    : lambda oid: 'compellent' in oid('.1.3.6.1.2.1.1.1.0').lower() and oid(".1.3.6.1.4.1.674.11000.2000.500.1.2.1.0"),
}
