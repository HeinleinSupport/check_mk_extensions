#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-



# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


# Example Agent Output
#<<<cpufreq>>>
#cpu0 ondemand 800000 800000 3001000
#cpu1 ondemand 3001000 800000 3001000
#cpu2 ondemand 1000000 800000 3001000
#cpu3 ondemand 1000000 800000 3001000

def inventory_cpufreq(info):
    if cmk.debug.enabled():
        pprint.pprint(info)
    if len(info) > 0 and len(info[0]) > 0:
        yield None, {}

def check_cpufreq(_no_item, _no_params, info):
    if cmk.debug.enabled():
        pprint.pprint(info)
    res = 0
    cpumsgs = []
    freqs = []
    perfdata = []
    errors = []
    for line in info:
        cpu = line[0]
        governor = line[1]
        cur_freq = saveint(line[2])
        min_freq = saveint(line[3])
        max_freq = saveint(line[4])

        epsilon = 5 # 5%

        text = '%s has %s governor with %0.2fMHz' % (cpu, governor, cur_freq / 1000.0)
        perfdata.append( ( 'freq_%s' % cpu, cur_freq * 1000.0, None, None, min_freq * 1000.0, max_freq * 1000.0 ) )
        freqs.append(cur_freq)

        if line[3] != 'unknown' and cur_freq < min_freq:
            text += ', min is %0.2fMHz(!!)' % (min_freq / 1000.0)
            errors.append(text)
            res = 2
        elif line[4] != 'unknown' and cur_freq > max_freq:
            text += ', max is %0.2fMHz(!!)' % (max_freq / 1000.0)
            errors.append(text)
            res = 2
        elif line[3] != 'unknwon' and cur_freq < min_freq * ( 100 + epsilon ) / 100.0:
            text += '(!)'
            errors.append(text)
            if res == 0:
                res = 1
        cpumsgs.append(text)
    avg_freq = float(sum(freqs)) / max(len(freqs), 1)
    return (res,
            "%d CPUs, average %0.2fMHz%s%s\n%s" % (len(freqs),
                                                   avg_freq / 1000.0,
                                                   ", " if len(errors) else "",
                                                   ", ".join(errors),
                                                   "\n".join(cpumsgs)),
            perfdata + [ ( 'freq_cpu_avg', avg_freq * 1000.0 ) ])

check_info['cpufreq'] = {
    'inventory_function':      inventory_cpufreq,
    'check_function':          check_cpufreq,
    'service_description':     'CPU Frequencies',
    'has_perfdata':            True,
}
