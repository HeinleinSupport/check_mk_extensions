#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# (c) 2017 Heinlein Support GmbH
#          Robert Sander <r.sander@heinlein-support.de>

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  This file is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def inventory_cephstatus(parsed):
    if 'health' in parsed:
        yield 'Status', {}

def check_cephstatus(item, params, parsed):
    _single_state = { 'state': 0, 'count': 0 }
    _pgstates_list = ['active+clean',
                      'active+clean+remapped',
                      'active+clean+scrubbing',
                      'active+clean+scrubbing+deep',
                      'active+recovering',
                      'active+recovery_wait',
                      'active+undersized',
                      'active+undersized+degraded',
                      'active+recovering+degraded',
                      'active+recovery_wait+degraded',
                      'active+recovery_wait+undersized+degraded',
                      'active+undersized+degraded+remapped+backfilling',
                      'active+undersized+degraded+remapped+backfill_wait',
                      'active+recovery_wait+degraded+remapped',
                      'active+recovery_wait+undersized+degraded+remapped',
                      'active+remapped+backfill_wait',
                      'active+remapped+backfilling',
                      'active+recovery_wait+remapped',
                      'stale+active+undersized+degraded',
                      'peering',
                      'remapped+peering'
                      'undersized+degraded+peered',
                     ]
    _ceph_pgstates = {}
    for state in _pgstates_list:
        _ceph_pgstates[state] = _single_state.copy()

    if 'health' in parsed:
        if 'status' in parsed['health']:
            if parsed['health']['status'] == 'HEALTH_OK':
                yield 0, 'Overall Health OK'
            elif 'checks' in parsed['health']:
                for check, data in parsed['health']['checks'].iteritems():
                    if data['severity'] == 'HEALTH_WARN':
                        yield 1, check + ": " + data['summary']['message']
                    else:
                        yield 2, check + ": " + data['summary']['message']
        elif 'overall_status' in parsed['health']:
            if parsed['health']['overall_status'] == 'HEALTH_OK':
                yield 0, 'Overall Health OK'
            elif 'summary' in parsed['health']:
                for data in parsed['health']['summary']:
                    if data['severity'] == 'HEALTH_WARN':
                        yield 1, data['summary']
                    else:
                        yield 2, data['summary']
        else:
            yield 3, "Overall Health status not found: %s" % parsed['health']
    else:
        yield 3, "Overall Health not found"
    if 'osdmap' in parsed:
        if 'osdmap' in parsed['osdmap']:
            if 'full' in parsed['osdmap']['osdmap']:
                if parsed['osdmap']['osdmap']['full']:
                    yield 2, 'OSD Map full'
            if 'nearfull' in parsed['osdmap']['osdmap']:
                if parsed['osdmap']['osdmap']['nearfull']:
                    yield 1, 'OSD Map near full'
    if 'pgmap' in parsed:
        pgmap = parsed['pgmap']
        if 'bytes_avail' in pgmap and 'bytes_total' in pgmap:
            size_mb = pgmap['bytes_total'] / 1048576.0
            avail_mb = pgmap['bytes_avail'] / 1048576.0
            yield df_check_filesystem_list(item, params, [ (item, size_mb, avail_mb, 0) ])
        if 'num_objects' in pgmap:
            yield 0, '%d Objects' % pgmap['num_objects'], [('num_objects', pgmap['num_objects'], 0)]
        if 'num_pgs' in pgmap:
            yield 0, '%d Placement Groups' % pgmap['num_pgs'], [('num_pgs', pgmap['num_pgs'], 0)]
        if 'pgs_by_state' in pgmap:
            for pgstate in pgmap['pgs_by_state']:
                if pgstate['state_name'] in _ceph_pgstates:
                    _ceph_pgstates[pgstate['state_name']]['count'] = pgstate['count']
                else:
                    yield 3, pgstate['state_name']
                if 'inconsistent' in pgstate['state_name'] or 'incomplete' in pgstate['state_name'] or 'active' not in pgstate['state_name']:
                    _ceph_pgstates[pgstate['state_name']]['state'] = 2
                elif 'active+clean' != pgstate['state_name'] and 'active+clean+scrubbing' != pgstate['state_name'] and 'active+clean+scrubbing+deep' != pgstate['state_name']:
                    _ceph_pgstates[pgstate['state_name']]['state'] = 1
                if 'stale' in pgstate['state_name']:
                    _ceph_pgstates[pgstate['state_name']]['state'] = 3
            perfdata = []
            msg = []
            rc = 3
            for pgstate, info in _ceph_pgstates.iteritems():
                if pgstate == 'active+clean':
                    rc = info['state']
                    msg.append('%d PGs in %s' % (info['count'], pgstate))
                    perfdata.append( ('pgstate_%s' % pgstate.replace('+', '_'), info['count'], 0) )
                elif info['count'] == 0:
                    perfdata.append( ('pgstate_%s' % pgstate.replace('+', '_'), info['count'], 0) )
                else: 
                    yield info['state'], '%d PGs in %s' % (info['count'], pgstate), [('pgstate_%s' % pgstate.replace('+', '_'), info['count'], 0)]
            yield rc, ', '.join(msg), perfdata
    if 'mgrmap' in parsed:
        if 'services' in parsed['mgrmap']:
            if 'dashboard' in parsed['mgrmap']['services']:
                yield 0, 'Dashboard: %s' % parsed['mgrmap']['services']['dashboard']

check_info["cephstatus"] = {
    'parse_function'        : parse_json,
    'check_function'        : check_cephstatus,
    'inventory_function'    : inventory_cephstatus,
    'service_description'   : 'Ceph %s',
    'has_perfdata'          : True,
    'group'                  : 'filesystem',
    'default_levels_variable': 'filesystem_default_levels',
    'includes'               : [ 'df.include', 'json.include' ],
}
