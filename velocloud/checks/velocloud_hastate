#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

#   .--hastate-------------------------------------------------------------.
#   |                  _               _        _                          |
#   |                 | |__   __ _ ___| |_ __ _| |_ ___                    |
#   |                 | '_ \ / _` / __| __/ _` | __/ _ \                   |
#   |                 | | | | (_| \__ \ || (_| | ||  __/                   |
#   |                 |_| |_|\__,_|___/\__\__,_|\__\___|                   |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   |                                                                      |
#   '----------------------------------------------------------------------'

def parse_velocloud_hastate(string_table):
    map_admin_state = {
        '1': 'Single',
        '2': 'Active Standby Pair',
        '3': 'Cluster',
        '4': 'VRRP Pair',
    }
    map_peer_state = {
        '1': 'initializing',
        '2': 'active',
        '3': 'standby',
    }
    if string_table:
        section = {
            'admin': int(string_table[0][0]),
            'peer': int(string_table[0][1]),
            'admin_text': map_admin_state.get(string_table[0][0], 'Unkown'),
            'peer_text': map_peer_state.get(string_table[0][1], 'Unknown'),
            'wan_active': int(string_table[0][2]),
            'lan_active': int(string_table[0][3]),
            'wan_standby': int(string_table[0][4]),
            'lan_standby': int(string_table[0][5]),
        }
        return section
    return None

def discover_velocloud_hastate(section):
    yield (None, {'admin_text': section['admin_text'], 'peer_text': section['peer_text']})

def check_velocloud_hastate(_no_item, params, section):
    if section['admin'] in [1, 2, 3, 4]:
        if section['admin_text'] != params.get('admin_text'):
            yield 1, 'Admin State changed from %s to %s' % (params.get('admin_text'), section['admin_text'])
        else:
            yield 0, 'Admin State: %s' % section['admin_text']
        if section['admin'] > 1:
            if section['peer'] != 3:
                yield 2, 'Peer State: %s' % section['peer_text']
            else:
                yield 0, 'Peer State: %s' % section['peer_text']
            if section['wan_active'] == section['wan_standby']:
                yield 0, '%d WAN links' % section['wan_active']
            else:
                yield 2, 'WAN: active node has %d links but standby node has %d links' % (section['wan_active'], section['wan_standby'])
            if section['lan_active'] == section['lan_standby']:
                yield 0, '%d LAN links' % section['lan_active']
            else:
                yield 2, 'LAN: active node has %d links but standby node has %d links' % (section['lan_active'], section['lan_standby'])

check_info["velocloud_hastate"] = {
    "parse_function": parse_velocloud_hastate,
    "service_description": "VeloCloud HA",
    "inventory_function": discover_velocloud_hastate,
    "check_function": check_velocloud_hastate,
    "has_perfdata": False,
    "snmp_info": (".1.3.6.1.4.1.45346.1.1.2.1.2",
                  [
                      "1.0", # vceHaAdminState
                      "2.0", # vceHaPeerState
                      "3.0", # vceHaActiveWanItfNum
                      "4.0", # vceHaActiveLanItfNum
                      "5.0", # vceHaStanbyWanItfNum
                      "6.0", # vceHaStanbyLanItfNum
                  ]),
    "snmp_scan_function": lambda oid: "VeloCloud" in oid(".1.3.6.1.2.1.1.1.0") and (
        oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.8072.3.2.10"
        or oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.45346.1.1"),
}
