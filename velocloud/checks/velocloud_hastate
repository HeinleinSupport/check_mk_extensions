#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

#   .--hastate-------------------------------------------------------------.
#   |                  _               _        _                          |
#   |                 | |__   __ _ ___| |_ __ _| |_ ___                    |
#   |                 | '_ \ / _` / __| __/ _` | __/ _ \                   |
#   |                 | | | | (_| \__ \ || (_| | ||  __/                   |
#   |                 |_| |_|\__,_|___/\__\__,_|\__\___|                   |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   |                                                                      |
#   '----------------------------------------------------------------------'

def parse_velocloud_hastate(string_table):
    map_admin_state = {
        '1': 'Single',
        '2': 'Active Standby Pair',
        '3': 'Cluster',
        '4': 'VRRP Pair',
    }
    map_peer_state = {
        '1': 'initializing',
        '2': 'active',
        '3': 'standby',
    }
    if string_table:
        section = {
            'admin': int(string_table[0][0]),
            'peer': int(string_table[0][1]),
            'admin_text': map_admin_state.get(string_table[0][0], 'Unkown'),
            'peer_text': map_peer_state.get(string_table[0][1], 'Unknown'),
        }
        return section
    return None

def discover_velocloud_hastate(section):
    yield (None, {})

def check_velocloud_hastate(_no_item, _no_params, section):
    if section['admin'] > 4:
        yield 2, section['admin_text']
    elif section['admin'] > 1:
        yield 0, section['admin_text']
        if section['peer'] > 3:
            yield 2, section['peer_text']
        elif section['peer'] == 1:
            yield 1, section['peer_text']
        else:
            yield 0, section['peer_text']
    else:
        yield 0, section['admin_text']

check_info["velocloud_hastate"] = {
    "parse_function": parse_velocloud_hastate,
    "service_description": "VeloCloud HA",
    "inventory_function": discover_velocloud_hastate,
    "check_function": check_velocloud_hastate,
    "has_perfdata": False,
    "snmp_info": (".1.3.6.1.4.1.45346.1.1.2.1.2",
                  [
                      "1.0",
                      "2.0",
                  ]),
    "snmp_scan_function": lambda oid: "VeloCloud" in oid(".1.3.6.1.2.1.1.1.0") and oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.8072.3.2.10",
}
