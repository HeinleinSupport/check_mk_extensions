#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# (c) 2016 Heinlein Support GmbH
#          Robert Sander <r.sander@heinlein-support.de>

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  This file is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

import ipaddr

netifaces_rbl_default_values = { 'crit': [ "bl.spamcop.org", "zen.spamhaus.org", "ix.dnsbl.manitu.net" ] }

netifaces_blacklist = [ ipaddr.IPNetwork('10.0.0.0/8'),
                        ipaddr.IPNetwork('127.0.0.0/8'),
                        ipaddr.IPNetwork('172.16.0.0/12'),
                        ipaddr.IPNetwork('192.168.0.0/16'),
                        ipaddr.IPNetwork('::1/128'),
                        ipaddr.IPNetwork('fe80::/10'),
                        ipaddr.IPNetwork('fc00::/7'),
                      ]

def parse_netifaces(info):
    res = {}
    for iface, family, addr in info:
        if not res.has_key(iface):
            res[iface] = {}
        if not res[iface].has_key(family):
            res[iface][family] = []
        res[iface][family].append(addr)
    return res

def inventory_netifaces_rbl(ifaces):
    inventory = []
    for iface in ifaces.keys():
        for family in ifaces[iface].keys():
            if family == 'AF_INET':
                for addr in ifaces[iface][family]:
                    addr = addr.split('/')[0]
                    if not reduce( lambda result, network: result or ( ipaddr.IPAddress(addr) in network ), netifaces_blacklist, False):
                        inventory.append( ( addr, netifaces_rbl_default_values ) )
    return inventory

def check_netifaces_rbl(item, rbls, ifaces):
    import socket
    levels = { 'warn': (1, '(!)'),
               'crit': (2, '(!!)'),
               }
    for iface, families in ifaces.iteritems():
        for family, addresses in families.iteritems():
            for address in map(lambda x: x.split('/')[0], addresses):
                if item == address:
                    msg = ["bound on %s" % iface]
                    res = 0
                    count = 0
                    for level, levelres in levels.iteritems():
                        for rbl in rbls[level]:
                            try:
                                ip = socket.gethostbyname("%s.%s." % (".".join(reversed(address.split('.'))), rbl))
                                if levelres[0] > res:
                                    res = levelres[0]
                                count += 1
                                msg.append('found in %s: %s %s' % (rbl, ip, levelres[1]))
                            except socket.gaierror, er:
                                if cmk.debug.enabled():
                                    print 'error in %s.%s): %s' % (".".join(reversed(address.split('.'))), rbl, er)
                                if er.args[0] != socket.EAI_NONAME:
                                    res = 1
                                    msg.append('%s yields %s(!)' % (rbl, er))
                    if count > 1:
                        res = 2
                        msg.append('found in more than 1 RBL (!!)')
                    return (res, ", ".join(msg))
    return (3, "%s not found" % item)

check_info["netifaces.rbl"] = {
    'check_function'        : check_netifaces_rbl,
    'inventory_function'    : inventory_netifaces_rbl,
    'service_description'   : 'RBL %s',
    'has_perfdata'          : False,
    'group'                 : 'netifaces_rbl',
}

check_default_levels['netifaces_rbl'] = 'netifaces_rbl_default_values'

factory_settings['netifaces_rbl_default_values'] = netifaces_rbl_default_values

check_info['netifaces'] = {
    'parse_function'        : parse_netifaces,
}
