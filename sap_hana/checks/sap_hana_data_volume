#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# (c) Robert Sander <r.sander@heinlein-support.de>

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Example output from agent:
#<<<sap_hana_data_volume:sep(59)>>>
#[[SID INSTANCE]]
#FILE_TYPE, SERVICE_NAME, VOLUME_ID, FILE_NAME, DISK_USED_SIZE, DISK_TOTAL_SIZE, DATA_VOLUME_USED_SIZE, DATA_VOLUME_TOTAL_SIZE
#DATA;indexserver;2;/hana/data/SID/mnt00001/hdb00002/datavolume_0000.dat;143334731776;1098974756864;90465591296;137517629440
#DATA;scriptserver;4;/hana/data/SID/mnt00001/hdb00004/datavolume_0000.dat;143334731776;1098974756864;69779456;335691776
#DATA;xsengine;3;/hana/data/SID/mnt00001/hdb00003/datavolume_0000.dat;143334731776;1098974756864;69779456;335691776

def inventory_sap_hana_data_volume(parsed):
    for instance, nodes in parsed.items():
        for node, lines in nodes.items():
            for line in lines:
                if len(line) == 8:
                    item = "%s - %s %s" % (instance, line[0], line[2])
                    yield item, {}
                    item = "%s - %s %s Disk" % (instance, line[0], line[2])
                    yield item, {}

def check_sap_hana_data_volume(item, params, parsed):
    for instance, nodes in parsed.items():
        for node, lines in nodes.items():
            if node:
                node_text = " on %s" % node
            else:
                node_text = ""
            for line in lines:
                itemname = "%s - %s %s" % (instance, line[0], line[2])
                if item == itemname and len(line) == 8:
                    yield 0, "Service %s, Path %s%s" % (line[1], line[3], node_text)
                    disk_size = saveint(line[7]) / 1048576.0
                    disk_used = saveint(line[6]) / 1048576.0
                    disk_avail = disk_size - disk_used
                    yield df_check_filesystem_list(item, params, [ (item , disk_size, disk_avail, 0) ])
                itemname = "%s - %s %s Disk" % (instance, line[0], line[2])
                if item == itemname and len(line) == 8:
                    disk_size = saveint(line[5]) / 1048576.0
                    disk_used = saveint(line[7]) / 1048576.0
                    disk_avail = disk_size - disk_used
                    if node_text:
                        yield 0, "Available%s" % node_text
                    yield df_check_filesystem_list(item, params, [ (item, disk_size, disk_avail, 0) ])

check_info["sap_hana_data_volume"] = {
    "parse_function"          : parse_sap_hana_cluster,
    "check_function"          : check_sap_hana_data_volume,
    "inventory_function"      : inventory_sap_hana_data_volume,
    "service_description"     : "SAP HANA Volume %s",
    "has_perfdata"            : True,
    "node_info"               : True,
    "includes"                : [ 'sap_hana.include', 'df.include' ],
    "group"                   : 'filesystem',
    "default_levels_variable" : 'filesystem_default_levels',
}
