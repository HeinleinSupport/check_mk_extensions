#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# (c) Gerd Stolz <Gerd.Stolz@sva.de>
# (c) Robert Sander <r.sander@heinlein-support.de>

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Example output from agent:
#[[PRH00]]
#"complete data backup","2016-11-08 20:02:10.389000000","successful","","<ok>"
#"log backup","2016-11-08 20:02:10.389000000","successful","","<ok>"

#SYS_END_TIME,status_NAME,COMMENT,MESSAGE
#status_name <=> Result of corresponding action: 'successful', 'failed', 'running', 'cancel pending', 'canceled'

# This will be parsed into
# parsed = {
#  u'PRH00': [[u'complete data backup', u'2016-11-08 20:02:10.389000000', u'successful', u'', u'<ok>'],
#             [u'log backup', u'2016-11-08 20:02:10.389000000', u'successful', u'', u'<ok>']]
# }

sap_hana_backup_default_values = { "backup_age" : [24,48]}

def inventory_sap_hana_backup(parsed):
    for instance, nodes in parsed.items():
        for node, lines in nodes.items():
            for line in lines:
                if len(line) > 0: #len = length, array/liste = zahl der elemente
                    item = "%s - %s" % (instance, line[0])
                    yield item, sap_hana_backup_default_values

def check_sap_hana_backup(item, params, parsed):
    import datetime
    for instance, nodes in parsed.items():
        for node, lines in nodes.items():
            if node:
                node_text = " on %s" % node
            else:
                node_text = ""
            for line in lines:
                itemname = "%s - %s" % (instance, line[0])
                if len(line) > 4 and item == itemname:
                    # unpack check parameters
                    (warn, crit) = params["backup_age"]
                    backup_type = line[0]
                    backup_timestamp = re.match('([^.]*)', line[1]).group(0) # keep only all characters before the first . => '2016-11-08 20:02:10.389000000' = Datatype:Timestamp
                    status = line[2]
                    comment = line[3]
                    message = line[4]

                    now = datetime.datetime.now()
                    date_format = "%Y-%m-%d %H:%M"
                    if warn == 0 or crit == 0:
                        age_str = "no levels set"
                    else:
                        warn_date = now - datetime.timedelta(hours=warn)
                        crit_date = now - datetime.timedelta(hours=crit)
                        age_str = "levels at %s/%s" %(warn_date.strftime(date_format),crit_date.strftime(date_format))
                    day_format = "%Y-%m-%d"
                    time_format = "%H:%M:%S"
                    last_backup = datetime.datetime.strptime(backup_timestamp, day_format + " " + time_format)
                    serviceOutput = "The %s%s from %s has the status: %s. Message: %s. Comment: %s." % (backup_type,node_text,last_backup.strftime(date_format),status,message,comment)

                    if status == 'failed':
                        yield 2, serviceOutput
                    elif status == 'cancel pending' or status == 'canceled':
                        yield 1, serviceOutput
                    elif status == 'successful' or status == 'running':
                        yield 0, serviceOutput
                    else:
                        yield 3, serviceOutput

                    # check if the last backup was done recently
                    if warn > 0 and crit > 0:
                        if last_backup < crit_date: 
                            yield 2, "Last backup is too old (%s)" % age_str
                        elif last_backup < warn_date : 
                            yield 1, "Last backup is too old (%s)" % age_str
                        else:
                            yield 0, "Last backup is new enough (%s)" % age_str

check_info["sap_hana_backup"] = {
    "parse_function"          : parse_sap_hana_cluster,
    "check_function"          : check_sap_hana_backup,
    "inventory_function"      : inventory_sap_hana_backup,
    "service_description"     : "SAP HANA Backup %s",
    "node_info"               : True,
    "group"                   : "sap_hana_backup",
    "includes"                : [ 'sap_hana.include' ],
}
