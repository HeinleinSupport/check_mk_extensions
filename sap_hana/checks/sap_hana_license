#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# (c) Gerd Stolz <Gerd.Stolz@sva.de>
# (c) Robert Sander <r.sander@heinlein-support.de>

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

#<<<sap_hana_license:sep(59)>>>
#[[SID INSTANCE]]
#"FALSE","FALSE","FALSE","11","2147483647","TRUE","?"

#ENFORCED, PERMANENT, LOCKED_DOWN, PRODUCT_USAGE, PRODUCT_LIMIT, VALID, EXPIRATION_DATE

factory_settings['sap_hana_license_default_values'] = {
    "license_usage" : (80.0, 90.0)
}

def inventory_sap_hana_license(parsed):
    for instance, nodes in parsed.items():
        for node, lines in nodes.items():
            for line in lines:
                if len(line) > 0:
                    item = "%s" % instance
                    yield item, sap_hana_license_default_values

def check_sap_hana_license(item, params, parsed):
    (warn,crit) = params["license_usage"]
    for instance, nodes in parsed.items():
        for node, lines in nodes.items():
            for line in lines:
                # unpack check parameters
                if len(line) > 4 and item == instance:
                    enforced    = line[0]
                    permanent   = line[1]
                    locked      = line[2]
                    p_usage     = savefloat(line[3])
                    p_limit     = savefloat(line[4])
                    prozent     = p_usage/(p_limit/100)
                    is_valid    = line[5]
                    expirydate  = line[6]

                    if node:
                        yield 0, "License info of %s" % node

                    if enforced == "TRUE":
                        # locked
                        # Code um die Usage zu prÃ¼fen + ggfs. mit Std. Schwellwerten 
                        # Levels in absolute numbers
                        if type(warn) == int:
                            warn_abs = warn
                            crit_abs = crit
                            warn_pct = warn*100/p_limit
                            crit_pct = crit*100/p_limit
                            limits = "%d/%dGB (warn/crit)" % (warn,crit)
                            perfdata = [("license","%dGB" % p_usage, warn_abs, crit_abs, 0, p_limit),("license_pct","%.01f%%" % prozent,warn_pct,crit_pct,0,100)] 
                            if p_usage > crit:
                                yield 2, "Product usage is over the critical limit (%s): %d > %dGB" % (limits,p_usage,crit),perfdata
                            elif p_usage > warn:
                                yield 1, "Product usage is over the warning limit (%s): %d > %dGB" % (limits,p_usage,warn),perfdata
                            else:
                                yield 0, "Product usage is within the limits (%s). Current usage: %dGB"  % (limits,p_usage),perfdata
                        else:
                            warn_pct = warn
                            crit_pct = crit
                            warn_abs = p_limit*warn_pct/100
                            crit_abs = p_limit*crit_pct/100
                            limits = "%.01f%%/%.01f%% (warn/crit)" % (warn,crit)
                            perfdata = [("license","%dGB" % p_usage, warn_abs, crit_abs, 0, p_limit),("license_pct","%.01f%%" % prozent,warn_pct,crit_pct,0,100)] 
                            if prozent > crit:
                                yield 2, "Product usage is over the critical limit (%s): %.01f%% > %.01f%%" % (limits, prozent,crit),perfdata
                            elif prozent > warn:
                                yield 1, "Product usage is over the warning limit (%s): %.01f%% > %.01f%%" % (limits, prozent,warn),perfdata
                            else:
                                yield 0, "Product usage is within the limits (%s). Current usage: %.01f%%"  % (limits, prozent),perfdata
                    elif enforced == "FALSE":
                        yield 0, "Licensed product usage is unlimited"
                    else:
                        yield 3, "License status is unknown: %s" % str(enforced)

                    if permanent == "TRUE":
                        yield 0, "License is permanent"
                    else:
                        yield 1, "License is not permanent"

                    if is_valid != "TRUE":
                        yield 1, "License is not valid"

                    if expirydate != "?":
                        yield 1, "Expiration Date is %s" % expirydate

                    if locked == "TRUE":
                        yield 2, "System is locked due to license status"
                
check_info["sap_hana_license"] = {
    "parse_function"          : parse_sap_hana_cluster,
    "check_function"          : check_sap_hana_license,
    "inventory_function"      : inventory_sap_hana_license,
    "service_description"     : "SAP HANA License %s",
    "has_perfdata"            : True,
    "node_info"               : True,
    "group"                   : "sap_hana_license",
    "includes"                : [ 'sap_hana.include' ],
    "default_levels_variable" : "sap_hana_license_default_values",
}
