#!/bin/bash
# SAP HANA Plugin for Check_MK Agent on Linux
# Copyright Gerd Stolz - SVA - 2016
# (c) 2017 Heinlein Support GmbH, Robert Sander <r.sander@heinlein-support.de>

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Changelog
# 0.1 - 2016-11-10
# Initial Version
# 0.2 - 2016-11-28
# sap_hana_backup - Filter out jobs in state_name = running
# don't query anything if SID or INSTANCE aren't set
# 0.3 - 2017-02-01
# consolidated versions including following
# 0.4 - 2017-09-02
# Stay silent when hdb isnt running, needed for this check to work on a cluster host
# support for hdb userkeystore
# support for SLES HANA Installations
# fix for working UNKW state when instance isn't running
# added support for replication.py script

if [ "$1" = "--debug" ]; then
  set -x
fi

# Variables
configFile="$MK_CONFDIR/sap_hana.cfg"
UNKNOWN_MESSAGE="All Started,UNKNOWN,Check failed - could not find config file $configFile"

function exit_unknown() {
    echo "<<<sap_hana_status:sep(59)>>>"
    echo $UNKNOWN_MESSAGE
    exit
}

# Prepare plugin run
if ! [ -e "$configFile" ] ; then
    exit_unknown
fi

source "$configFile"
# configfile should contain USERSTOREKEY for support of multiple HANA instances OR USER + PASSWORD
# The USERSTOREKEY (if available) is then merged with the SID name to to find a matching entry in the HDB USERSTORE.
# i.e. USERSTOREKEY="SVAMON" + SID = I08 means we need a key for SVAMONI08 in the HDB userstore

if [ -z $USERSTOREKEY ] ; then
    # we only need to check for user + pw when we are not using the HDB Userstore,
    if [ -z $USER ] || [ -z $PASSWORD ] ; then
	exit_unknown
    fi
fi

function do_query() {

    INSTANCE_NAME="[[${SID} ${INSTANCE}]]"

    function hdbsql() {
	# -C don't escape output, -F change separator , -x = quiet output, only query result / -a = no header in reply to select statements
	# plus sed removes leading and trailing ;
	if [ -n "$USERSTOREKEY" ] ; then
	    # CREDENTIALS="-U ${USERSTOREKEY}${SID}"
	    CREDENTIALS="-U ${USERSTOREKEY}"
	else
	    CREDENTIALS="-u ${USER} -p ${PASSWORD}"
	fi
	su - ${INSTANCEUSER} -c "/usr/sap/${SID}/HDB${INSTANCE}/exe/hdbsql -C -F\; -x -a -n localhost -i ${INSTANCE} ${CREDENTIALS} \"$1\"" 2>/dev/null | sed -e "s/^;//" -e "s/;$//" ; (exit ${PIPESTATUS[0]})
    }

    # Check status
    echo "<<<sap_hana_status:sep(59)>>>"
    output=$(hdbsql "SELECT Name, Status, Value FROM M_SYSTEM_OVERVIEW Where NAME='Version' or NAME='All Started'")
    if [ $? != 0 ] ; then
	#echo 'All Started;UNKNOWN;Check failed - Could not query' ${INSTANCE_NAME} '- will stop all checks against this instance'
	# for single instances we could execute the line above, however,
	# this will create problems when we want to cluster the check,
	# so we now exit nothing if an instance isn't running.
	return
	# leaving do_query, if we can't even query
    fi
    echo $INSTANCE_NAME
    echo "$output"
    echo "<<<sap_hana_backup:sep(59)>>>"
    echo $INSTANCE_NAME
    query_prefix="Select TOP 1 entry_type_name, sys_end_time, state_name, comment, message from M_BACKUP_CATALOG where"
    query_suffix="AND state_name <> 'running' order by sys_start_time desc"
    hdbsql "$query_prefix entry_type_name = 'data snapshot' $query_suffix"
    hdbsql "$query_prefix entry_type_name = 'complete data backup' $query_suffix"
    hdbsql "$query_prefix entry_type_name = 'log backup' $query_suffix"
    
    echo "<<<sap_hana_diskusage:sep(59)>>>"
    echo $INSTANCE_NAME
    hdbsql "SELECT name,status,value FROM M_SYSTEM_OVERVIEW Where NAME='Data' or NAME='Log' or NAME='Trace'"

    echo "<<<sap_hana_data_volume:sep(59)>>>"
    echo $INSTANCE_NAME
    hdbsql "SELECT FILE_TYPE, SERVICE_NAME, VOLUME_ID, FILE_NAME, DISK_USED_SIZE, DISK_TOTAL_SIZE, DATA_VOLUME_USED_SIZE, DATA_VOLUME_TOTAL_SIZE FROM (select VF.FILE_TYPE, VF.HOST, VF.FILE_NAME, VF.DISK_PART, VF.DATA_VOLUME_USED_SIZE, VF.DATA_VOLUME_TOTAL_SIZE, DS.DISK_USED_SIZE, DS.DISK_TOTAL_SIZE, V.SERVICE_NAME, V.VOLUME_ID FROM (select  VOLUME_ID, FILE_TYPE, HOST, FILE_NAME, LEFT ( FILE_NAME, LOCATE (FILE_NAME, '/', 0, 4) -1 ) DISK_PART, (USED_SIZE) DATA_VOLUME_USED_SIZE, SUM (TOTAL_SIZE) DATA_VOLUME_TOTAL_SIZE FROM M_VOLUME_FILES WHERE FILE_TYPE = 'DATA' GROUP BY VOLUME_ID, USED_SIZE, FILE_TYPE, HOST, FILE_NAME, LEFT ( FILE_NAME, LOCATE (FILE_NAME, '/', 0, 4) -1) ) VF JOIN (select  LEFT (PATH, LENGTH(PATH) - 1) AS DISK_PART, HOST, SUBPATH, DEVICE_ID, USAGE_TYPE, MAX(TOTAL_SIZE) DISK_TOTAL_SIZE, MAX (USED_SIZE) AS DISK_USED_SIZE FROM M_DISKS WHERE USAGE_TYPE = 'DATA' GROUP BY SUBPATH, LEFT (PATH, LENGTH(PATH) - 1), HOST, DEVICE_ID, USAGE_TYPE ) DS ON VF.DISK_PART = DS.DISK_PART and VF.HOST = DS.HOST LEFT JOIN (select VOLUME_ID, SERVICE_NAME from M_VOLUMES) V ON VF.VOLUME_ID = V.VOLUME_ID) WHERE HOST = '$(hostname -f)'"

    echo "<<<sap_hana_license:sep(59)>>>"
    echo $INSTANCE_NAME
    hdbsql "SELECT ENFORCED,PERMANENT,LOCKED_DOWN,PRODUCT_USAGE,PRODUCT_LIMIT,VALID,EXPIRATION_DATE FROM M_LICENSE"

    remote_hostname=$(echo $REMOTE | tr ':' '_')
    if [ -z "$remote_hostname" ]; then
        alerts_last_check="$MK_VARDIR/sap_hana_alerts_${INSTANCE_NAME}.last_checked"
    else
        alerts_last_check="$MK_VARDIR/sap_hana_alerts_${INSTANCE_NAME}.$remote_hostname.last_checked"
    fi
    echo "<<<logwatch>>>"
    echo [[[SAP HANA Alerts for ${SID} ${INSTANCE}]]]
    if [ -r "$alerts_last_check" ] ; then
	hdbsql "Select ALERT_TIMESTAMP,ALERT_ID,ALERT_RATING,ALERT_DETAILS from  _SYS_STATISTICS.STATISTICS_ALERTS Where ALERT_TIMESTAMP >= '$(cat "$alerts_last_check")' AND (ALERT_ID < '22' OR ALERT_ID > '24') order by ALERT_TIMESTAMP asc"  | sed -e "s/^/W /" -e 's/^W \([^;]*;[0-9]*;1;.*\)/O \1/' -e 's/^W \([^;]*;[0-9]*;[23];.*\)/W \1/' -e 's/^W \([^;]*;[0-9]*;[45];.*\)/C \1/'
    else
	hdbsql "Select ALERT_TIMESTAMP,ALERT_ID,ALERT_RATING,ALERT_DETAILS from  _SYS_STATISTICS.STATISTICS_ALERTS Where ALERT_TIMESTAMP IN (Select max(ALERT_TIMESTAMP) from _SYS_STATISTICS.STATISTICS_ALERTS  group by ALERT_ID) AND ADD_DAYS(Current_timestamp,-1)<=ALERT_TIMESTAMP AND (ALERT_ID < '22' OR ALERT_ID > '24') order by ALERT_TIMESTAMP desc"  | sed -e "s/^/W /" -e 's/^W \([^;]*;[0-9]*;1;.*\)/O \1/' -e 's/^W \([^;]*;[0-9]*;[23];.*\)/W \1/' -e 's/^W \([^;]*;[0-9]*;[45];.*\)/C \1/'
    fi
    if [ $? = 0 ] ; then
	date +"%Y-%m-%d %H:%M:%S" > "$alerts_last_check" #2016-11-09 16:14:16.410000000
    fi

    echo "<<<sap_hana_replication_status>>>"
    echo $INSTANCE_NAME
    su - ${INSTANCEUSER} -c "python /usr/sap/${SID}/HDB${INSTANCE}/exe/python_support/systemReplicationStatus.py"
    echo "Returncode: $?"

    echo "<<<sap_hana_ess:sep(59)>>>"
    echo $INSTANCE_NAME
    hdbsql "SELECT 'started', count(*) FROM M_SERVICE_THREADS where thread_type='WorkerThread (StatisticsServer)' and HOST = '$(hostname -f)'"
    hdbsql "select 'active', MAP(IFNULL(SYSTEM_VALUE, IFNULL(HOST_VALUE,DEFAULT_VALUE)), 'true', 'yes', 'false', 'no', 'unknown') FROM (SELECT  MAX(MAP(LAYER_NAME, 'DEFAULT', VALUE)) DEFAULT_VALUE, MAX(MAP(LAYER_NAME, 'HOST',VALUE)) HOST_VALUE, MAX(MAP(LAYER_NAME, 'SYSTEM',  VALUE, 'DATABASE', VALUE)) SYSTEM_VALUE FROM  M_INIFILE_CONTENTS WHERE  FILE_NAME IN ('indexserver.ini', 'nameserver.ini') AND SECTION = 'statisticsserver' AND  KEY = 'active')"

    echo "<<<sap_hana_memrate:sep(59)>>>"
    echo $INSTANCE_NAME
    hdbsql "SELECT 'mem_rate', INSTANCE_TOTAL_MEMORY_USED_SIZE, ALLOCATION_LIMIT FROM M_HOST_RESOURCE_UTILIZATION WHERE HOST = '$(hostname -f)'"
    
    echo "<<<sap_hana_events:sep(59)>>>"
    echo $INSTANCE_NAME
    hdbsql "select 'open_events', count(*) from m_events where acknowledged='FALSE'"
    hdbsql "select 'disabled_alerts', count(*) from _sys_statistics.STATISTICS_SCHEDULE where status='Disabled'"
    hdbsql "select 'high_alerts', count(*) from _sys_statistics.statistics_current_alerts  where  alert_rating >=3"
    
    echo "<<<sap_hana_proc:sep(59)>>>"
    echo $INSTANCE_NAME
    hdbsql "SELECT PORT,SERVICE_NAME,PROCESS_ID,DETAIL,ACTIVE_STATUS,SQL_PORT,COORDINATOR_TYPE FROM M_SERVICES WHERE HOST = '$(hostname -f)'"

    # echo "<<<sap_hana_threads:sep(59)>>>"
    # echo $INSTANCE_NAME
    # hdbsql "select MAX(CPU_TIME_CUMULATIVE), THREAD_METHOD from M_SERVICE_THREADS where THREAD_METHOD <> '' and HOST = '$(hostname -f)' group by THREAD_METHOD"
    # hdbsql "SELECT SERVICE_NAME, CONNECTION_ID, THREAD_ID, THREAD_METHOD, CALLER, DURATION FROM M_SERVICE_THREADS WHERE HOST = '$(hostname -f)'"

    echo "<<<fileinfo:sep(59)>>>"
    date +%s
    hdbsql "SELECT '/SAP HANA $SID $INSTANCE/' || FILE_NAME, FILE_SIZE, SECONDS_BETWEEN('1970-01-01 00:00:00', FILE_MTIME) AS UNIXMTIME FROM M_TRACEFILES WHERE HOST = '$(hostname -f)'"

}

# find SID using
running_hana_instances=$(ps -efw | grep [H]DB.*sapstartsrv)
#hana01:/usr/sap/PRH/HDB00/exe # ps -ef | grep [H]DB.*sapstartsrv
#prhadm    4943     1  0 Nov09 ?        00:00:50 /usr/sap/PRH/HDB00/exe/sapstartsrv pf=/usr/sap/PRH/SYS/profile/PRH_HDB00_hana01 -D -u prhadm
printf "$running_hana_instances\n" | while read line ; do
    SID=$(echo "$line" | grep  -Po '(?<= /usr/sap/)\w{3}') # (!<= is a look behind assertion, so we find \w{3} <- 3 alpha-numerical characters, that follow " /usr/sap/" <- note the leading space
    INSTANCE=$(echo "$line" | grep  -Po "(?<= /usr/sap/${SID}/HDB)\d{2}") # same logic as above, but look for 2 \d digits
    INSTANCEUSER=$(echo "$line" | grep -Po "^\s*(\w+)") # grep only the first word = the user running the instance
    if [ -z $INSTANCE ] || [ -z $SID ] ; then
	continue; # no SID or INSTANCE found, no need to query anything
    else
	do_query
    fi
done

