#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def inventory_seppmail(info):
    for line in info:
        yield (line[0], {})

def check_seppmail(item, params, info):
    metric_map = {
        'mailsInQueueActive': 'mail_queue_active_length',
        'mailsInQueueDeferred': 'mail_queue_deferred_length',
        'mailsInQueueIncoming': 'mail_queue_incoming_length',
    }
    text_map = {
        'mailsPgpDec': 'PGP Mails decoded',
        'mailsPgpEnc': 'PGP Mails encoded',
        'mailsSmimeDec': 'S/MIME Mails decoded',
        'mailsSmimeEnc': 'S/MIME Mails encoded',
        'mailsDomainDec': 'Domain Mails decoded',
        'mailsDomainEnc': 'Domain Mails encoded',
        'mailsProcessed': 'Total Mails processed',
        'mailsInQueueActive': 'Mails in active queue',
        'mailsInQueueDeferred': 'Mails in deferred queue',
        'mailsInQueueIncoming': 'Mails in incoming queue',
    }
    if type(params) is not dict:
        params = { "deferred" : params }
    for line in info:
        name = line[0]
        value = saveint(line[1])
        if item == name:
            state = 0
            infotext = "%d %s" % (value, text_map.get(name))

            if name in metric_map:
                if name == 'mailsInQueueActive':
                    warn, crit = params.get('active', (None, None))
                else:
                    warn, crit = params.get('deferred', (None, None))
            else:
                warn, crit = None, None

            if crit is not None and value >= crit:
                state = 2
                infotext += " (warn/crit at %d/%d)(!!)" % (warn, crit)
            elif warn is not None and value >= warn:
                state = 1
                infotext += " (warn/crit at %d/%d)(!)" % (warn, crit)

            perfdata = [( metric_map.get(name, 'messages'), value, warn, crit )]

            if name not in metric_map:
                rate = get_rate('seppmail_%s' % name, time.time(), value)
                perfdata += [( 'average_message_rate', rate )]
                infotext += ', at a rate of %0.2f messages per second' % rate

            yield state, infotext, perfdata

check_info['seppmail'] = {
    "inventory_function"      : inventory_seppmail,
    "check_function"          : check_seppmail,
    "service_description"     : "SEPPmail %s",
    "has_perfdata"            : True,
    "group"                   : "mail_queue_length",
    "snmp_info"               : ( ".1.3.6.1.4.1.8072.1.3.2", [ "2.1.3", "3.1.1" ] ),
    "snmp_scan_function"      : lambda oid: oid(".1.3.6.1.2.1.1.2.0") == '.1.3.6.1.4.1.30155.23.1',
    "default_levels_variable" : "postfix_mailq_default_levels",
}
